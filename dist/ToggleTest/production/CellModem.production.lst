

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Nov 15 00:57:10 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	smallconst
    41  000300                     __psmallconst:
    42                           	opt stack 0
    43  000300  00                 	db	0
    44  000301                     _BitNum2SetMask:
    45                           	opt stack 0
    46  000301  0001               	dw	1
    47  000303  0002               	dw	2
    48  000305  0004               	dw	4
    49  000307  0008               	dw	8
    50  000309  0010               	dw	16
    51  00030B  0020               	dw	32
    52  00030D  0040               	dw	64
    53  00030F  0080               	dw	128
    54  000311  0100               	dw	256
    55  000313  0200               	dw	512
    56  000315  0400               	dw	1024
    57  000317  0800               	dw	2048
    58  000319  1000               	dw	4096
    59  00031B  2000               	dw	8192
    60  00031D  4000               	dw	16384
    61  00031F  8000               	dw	32768
    62  000321                     __end_of_BitNum2SetMask:
    63                           	opt stack 0
    64  000321                     _Timer2PostFunc:
    65                           	opt stack 0
    66  000321  B8                 	db	low _PostToggleService
    67  000322  0C                 	db	high _PostToggleService
    68  000323  00                 	db	0
    69  000324  00                 	db	0
    70  000325  00                 	db	0
    71  000326  00                 	db	0
    72  000327  00                 	db	0
    73  000328  00                 	db	0
    74  000329  00                 	db	0
    75  00032A  00                 	db	0
    76  00032B  00                 	db	0
    77  00032C  00                 	db	0
    78  00032D  00                 	db	0
    79  00032E  00                 	db	0
    80  00032F  00                 	db	0
    81  000330  00                 	db	0
    82  000331  00                 	db	0
    83  000332  00                 	db	0
    84  000333  00                 	db	0
    85  000334  00                 	db	0
    86  000335  00                 	db	0
    87  000336  00                 	db	0
    88  000337  00                 	db	0
    89  000338  00                 	db	0
    90  000339  00                 	db	0
    91  00033A  00                 	db	0
    92  00033B  00                 	db	0
    93  00033C  00                 	db	0
    94  00033D  00                 	db	0
    95  00033E  00                 	db	0
    96  00033F  00                 	db	0
    97  000340  00                 	db	0
    98  000341                     __end_of_Timer2PostFunc:
    99                           	opt stack 0
   100  000341                     _Nybble2MSBitNum:
   101                           	opt stack 0
   102  000341  00                 	db	0
   103  000342  01                 	db	1
   104  000343  01                 	db	1
   105  000344  02                 	db	2
   106  000345  02                 	db	2
   107  000346  02                 	db	2
   108  000347  02                 	db	2
   109  000348  03                 	db	3
   110  000349  03                 	db	3
   111  00034A  03                 	db	3
   112  00034B  03                 	db	3
   113  00034C  03                 	db	3
   114  00034D  03                 	db	3
   115  00034E  03                 	db	3
   116  00034F  03                 	db	3
   117  000350                     __end_of_Nybble2MSBitNum:
   118                           	opt stack 0
   119  000350                     _ServDescList:
   120                           	opt stack 0
   121  000350  8E                 	db	low _InitToggleService
   122  000351  0B                 	db	high _InitToggleService
   123  000352  54                 	db	low _RunToggleService
   124  000353  0B                 	db	high _RunToggleService
   125  000354                     __end_of_ServDescList:
   126                           	opt stack 0
   127  000354                     _EventQueues:
   128                           	opt stack 0
   129  000354  80                 	db	low _Queue0
   130  000355  00                 	db	high _Queue0
   131  000356  06                 	db	6
   132  000357                     __end_of_EventQueues:
   133                           	opt stack 0
   134  000357                     _ES_EventList:
   135                           	opt stack 0
   136  000357  EC                 	db	low _Check4Keystroke
   137  000358  0C                 	db	high _Check4Keystroke
   138  000359                     __end_of_ES_EventList:
   139                           	opt stack 0
   140  000359                     _DistList00:
   141                           	opt stack 0
   142  000359  B8                 	db	low _PostToggleService
   143  00035A  0C                 	db	high _PostToggleService
   144  00035B                     __end_of_DistList00:
   145                           	opt stack 0
   146  0000                     _ADCON1bits	set	4033
   147  0000                     _CCP1CON	set	4029
   148  0000                     _CCPR1H	set	4031
   149  0000                     _CCPR1L	set	4030
   150  0000                     _INTCON	set	4082
   151  0000                     _LATA	set	3977
   152  0000                     _LATB	set	3978
   153  0000                     _LATC	set	3979
   154  0000                     _PIE1	set	3997
   155  0000                     _PORTA	set	3968
   156  0000                     _PORTB	set	3969
   157  0000                     _PORTC	set	3970
   158  0000                     _PORTCbits	set	3970
   159  0000                     _T1CON	set	4045
   160  0000                     _TRISA	set	3986
   161  0000                     _TRISB	set	3987
   162  0000                     _TRISC	set	3988
   163  0000                     _CCP1IF	set	31986
   164  0000                     _GIE	set	32663
   165  0000                     _IRCF0	set	32412
   166  0000                     _IRCF1	set	32413
   167  0000                     _IRCF2	set	32414
   168  0000                     _LATA0	set	31816
   169  0000                     _LATA1	set	31817
   170  0000                     _LATA2	set	31818
   171  0000                     _LATC2	set	31834
   172  00035B                     STR_1:
   173  00035B  46                 	db	70	;'F'
   174  00035C  61                 	db	97	;'a'
   175  00035D  69                 	db	105	;'i'
   176  00035E  6C                 	db	108	;'l'
   177  00035F  65                 	db	101	;'e'
   178  000360  64                 	db	100	;'d'
   179  000361  20                 	db	32
   180  000362  6F                 	db	111	;'o'
   181  000363  6E                 	db	110	;'n'
   182  000364  20                 	db	32
   183  000365  61                 	db	97	;'a'
   184  000366  74                 	db	116	;'t'
   185  000367  74                 	db	116	;'t'
   186  000368  65                 	db	101	;'e'
   187  000369  6D                 	db	109	;'m'
   188  00036A  70                 	db	112	;'p'
   189  00036B  74                 	db	116	;'t'
   190  00036C  20                 	db	32
   191  00036D  74                 	db	116	;'t'
   192  00036E  6F                 	db	111	;'o'
   193  00036F  20                 	db	32
   194  000370  50                 	db	80	;'P'
   195  000371  6F                 	db	111	;'o'
   196  000372  73                 	db	115	;'s'
   197  000373  74                 	db	116	;'t'
   198  000374  0A                 	db	10
   199  000375  00                 	db	0
   200  000376                     STR_2:
   201  000376  46                 	db	70	;'F'
   202  000377  61                 	db	97	;'a'
   203  000378  69                 	db	105	;'i'
   204  000379  6C                 	db	108	;'l'
   205  00037A  65                 	db	101	;'e'
   206  00037B  64                 	db	100	;'d'
   207  00037C  20                 	db	32
   208  00037D  6F                 	db	111	;'o'
   209  00037E  6E                 	db	110	;'n'
   210  00037F  20                 	db	32
   211  000380  4E                 	db	78	;'N'
   212  000381  55                 	db	85	;'U'
   213  000382  4C                 	db	76	;'L'
   214  000383  4C                 	db	76	;'L'
   215  000384  20                 	db	32
   216  000385  70                 	db	112	;'p'
   217  000386  6F                 	db	111	;'o'
   218  000387  69                 	db	105	;'i'
   219  000388  6E                 	db	110	;'n'
   220  000389  74                 	db	116	;'t'
   221  00038A  65                 	db	101	;'e'
   222  00038B  72                 	db	114	;'r'
   223  00038C  0A                 	db	10
   224  00038D  00                 	db	0
   225  00038E                     STR_3:
   226  00038E  46                 	db	70	;'F'
   227  00038F  61                 	db	97	;'a'
   228  000390  69                 	db	105	;'i'
   229  000391  6C                 	db	108	;'l'
   230  000392  65                 	db	101	;'e'
   231  000393  64                 	db	100	;'d'
   232  000394  20                 	db	32
   233  000395  49                 	db	73	;'I'
   234  000396  6E                 	db	110	;'n'
   235  000397  69                 	db	105	;'i'
   236  000398  74                 	db	116	;'t'
   237  000399  69                 	db	105	;'i'
   238  00039A  61                 	db	97	;'a'
   239  00039B  6C                 	db	108	;'l'
   240  00039C  69                 	db	105	;'i'
   241  00039D  7A                 	db	122	;'z'
   242  00039E  61                 	db	97	;'a'
   243  00039F  74                 	db	116	;'t'
   244  0003A0  69                 	db	105	;'i'
   245  0003A1  6F                 	db	111	;'o'
   246  0003A2  6E                 	db	110	;'n'
   247  0003A3  0A                 	db	10
   248  0003A4  00                 	db	0
   249  0003A5                     STR_4:
   250  0003A5  4F                 	db	79	;'O'
   251  0003A6  74                 	db	116	;'t'
   252  0003A7  68                 	db	104	;'h'
   253  0003A8  65                 	db	101	;'e'
   254  0003A9  72                 	db	114	;'r'
   255  0003AA  20                 	db	32
   256  0003AB  46                 	db	70	;'F'
   257  0003AC  61                 	db	97	;'a'
   258  0003AD  69                 	db	105	;'i'
   259  0003AE  6C                 	db	108	;'l'
   260  0003AF  75                 	db	117	;'u'
   261  0003B0  72                 	db	114	;'r'
   262  0003B1  65                 	db	101	;'e'
   263  0003B2  0A                 	db	10
   264  0003B3  00                 	db	0
   265                           
   266                           ; #config settings
   267  0003B4  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  000C50                     __pcinit:
   271                           	opt stack 0
   272  000C50                     start_initialization:
   273                           	opt stack 0
   274  000C50                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Clear objects allocated to BANK0 (50 bytes)
   278  000C50  EE00  F060         	lfsr	0,__pbssBANK0
   279  000C54  0E32               	movlw	50
   280  000C56                     clear_0:
   281  000C56  6AEE               	clrf	postinc0,c
   282  000C58  06E8               	decf	wreg,f,c
   283  000C5A  E1FD               	bnz	clear_0
   284                           
   285                           ; Clear objects allocated to COMRAM (28 bytes)
   286  000C5C  EE00  F033         	lfsr	0,__pbssCOMRAM
   287  000C60  0E1C               	movlw	28
   288  000C62                     clear_1:
   289  000C62  6AEE               	clrf	postinc0,c
   290  000C64  06E8               	decf	wreg,f,c
   291  000C66  E1FD               	bnz	clear_1
   292  000C68                     end_of_initialization:
   293                           	opt stack 0
   294  000C68                     __end_of__initialization:
   295                           	opt stack 0
   296  000C68  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   297  000C6A  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   298  000C6C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   299  000C6E  6EF8               	movwf	tblptru,c
   300  000C70  0100               	movlb	0
   301  000C72  EF0C  F004         	goto	_main	;jump to C main() function
   302                           tblptru	equ	0xFF8
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           
   306                           	psect	bssCOMRAM
   307  000033                     __pbssCOMRAM:
   308                           	opt stack 0
   309  000033                     ES_Timer_Tick_Resp@NewEvent:
   310                           	opt stack 0
   311  000033                     	ds	3
   312  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   313                           	opt stack 0
   314  000036                     	ds	2
   315  000038                     ISR@LastTime:
   316                           	opt stack 0
   317  000038                     	ds	2
   318  00003A                     ISR@NextTime:
   319                           	opt stack 0
   320  00003A                     	ds	2
   321  00003C                     _Ready:
   322                           	opt stack 0
   323  00003C                     	ds	2
   324  00003E                     _SysTickCounter:
   325                           	opt stack 0
   326  00003E                     	ds	2
   327  000040                     _TMR_ActiveFlags:
   328                           	opt stack 0
   329  000040                     	ds	2
   330  000042                     __PRIMASK_temp:
   331                           	opt stack 0
   332  000042                     	ds	2
   333  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   334                           	opt stack 0
   335  000044                     	ds	1
   336  000045                     TemplateService@MyPriority:
   337                           	opt stack 0
   338  000045                     	ds	1
   339  000046                     ToggleService@MyPriority:
   340                           	opt stack 0
   341  000046                     	ds	1
   342  000047                     _AccelerometerIOC:
   343                           	opt stack 0
   344  000047                     	ds	1
   345  000048                     _CurrentState:
   346                           	opt stack 0
   347  000048                     	ds	1
   348  000049                     _MyPriority:
   349                           	opt stack 0
   350  000049                     	ds	1
   351  00004A                     _PacketReceived:
   352                           	opt stack 0
   353  00004A                     	ds	1
   354  00004B                     _TickCount:
   355                           	opt stack 0
   356  00004B                     	ds	1
   357  00004C                     ES_Run@ThisEvent:
   358                           	opt stack 0
   359  00004C                     	ds	3
   360                           tblptru	equ	0xFF8
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	bssBANK0
   365  000060                     __pbssBANK0:
   366                           	opt stack 0
   367  000060                     _TMR_TimerArray:
   368                           	opt stack 0
   369  000060                     	ds	32
   370  000080                     _Queue0:
   371                           	opt stack 0
   372  000080                     	ds	18
   373                           tblptru	equ	0xFF8
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           
   377                           	psect	cstackBANK0
   378  000092                     __pcstackBANK0:
   379                           	opt stack 0
   380  000092                     ??_ES_Timer_Tick_Resp:
   381  000092                     ES_Initialize@NewRate:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x0
   385  000092                     	ds	4
   386  000096                     ??_ES_Run:
   387                           
   388                           ; 1 bytes @ 0x4
   389  000096                     	ds	4
   390  00009A                     main@ErrorType:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x8
   394  00009A                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackCOMRAM
   400  000001                     __pcstackCOMRAM:
   401                           	opt stack 0
   402  000001                     ??_ISR:
   403  000001                     
   404                           ; 1 bytes @ 0x0
   405  000001                     	ds	16
   406  000011                     ?_printf:
   407                           	opt stack 0
   408  000011                     ?___awmod:
   409                           	opt stack 0
   410  000011                     ES_CheckUserEvents@i:
   411                           	opt stack 0
   412  000011                     ___lbmod@divisor:
   413                           	opt stack 0
   414  000011                     ES_GetMSBitSet@Val2Check:
   415                           	opt stack 0
   416  000011                     __HW_Timer_Init@Rate:
   417                           	opt stack 0
   418  000011                     ES_InitQueue@pBlock:
   419                           	opt stack 0
   420  000011                     ES_Timer_InitTimer@NewTime:
   421                           	opt stack 0
   422  000011                     printf@f:
   423                           	opt stack 0
   424  000011                     ___awmod@dividend:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x10
   428  000011                     	ds	1
   429  000012                     ___lbmod@dividend:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x11
   433  000012                     	ds	1
   434  000013                     ??_ES_GetMSBitSet:
   435  000013                     ??_ES_Timer_InitTimer:
   436  000013                     ES_InitQueue@BlockSize:
   437                           	opt stack 0
   438  000013                     ___lbmod@counter:
   439                           	opt stack 0
   440  000013                     ES_Timer_Init@Rate:
   441                           	opt stack 0
   442  000013                     printf@ap:
   443                           	opt stack 0
   444  000013                     ___awmod@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x12
   448  000013                     	ds	1
   449  000014                     ___lbmod@rem:
   450                           	opt stack 0
   451  000014                     ES_InitQueue@pThisQueue:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x13
   455  000014                     	ds	1
   456  000015                     ES_Timer_InitTimer@Num:
   457                           	opt stack 0
   458  000015                     printf@c:
   459                           	opt stack 0
   460  000015                     ___awmod@counter:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x14
   464  000015                     	ds	1
   465  000016                     ?_RunToggleService:
   466                           	opt stack 0
   467  000016                     ___awmod@sign:
   468                           	opt stack 0
   469  000016                     RunToggleService@ThisEvent:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0x15
   473  000016                     	ds	1
   474  000017                     ?___wmul:
   475                           	opt stack 0
   476  000017                     ___wmul@multiplier:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x16
   480  000017                     	ds	1
   481  000018                     ES_GetMSBitSet@ReturnVal:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x17
   485  000018                     	ds	1
   486  000019                     ES_GetMSBitSet@Nybble2Test:
   487                           	opt stack 0
   488  000019                     ___wmul@multiplicand:
   489                           	opt stack 0
   490  000019                     RunToggleService@ReturnEvent:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0x18
   494  000019                     	ds	1
   495  00001A                     ES_GetMSBitSet@LoopCntr:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x19
   499  00001A                     	ds	1
   500  00001B                     ___wmul@product:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1A
   504  00001B                     	ds	2
   505  00001D                     ES_EnQueueFIFO@pBlock:
   506                           	opt stack 0
   507  00001D                     ES_DeQueue@pBlock:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1C
   511  00001D                     	ds	2
   512  00001F                     ES_DeQueue@pReturnEvent:
   513                           	opt stack 0
   514  00001F                     ES_EnQueueFIFO@Event2Add:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x1E
   518  00001F                     	ds	2
   519  000021                     ??_ES_DeQueue:
   520                           
   521                           ; 1 bytes @ 0x20
   522  000021                     	ds	1
   523  000022                     ??_ES_EnQueueFIFO:
   524                           
   525                           ; 1 bytes @ 0x21
   526  000022                     	ds	1
   527  000023                     ES_DeQueue@SaveCrit:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x22
   531  000023                     	ds	1
   532  000024                     ES_DeQueue@NumLeft:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x23
   536  000024                     	ds	1
   537  000025                     ES_EnQueueFIFO@SaveCrit:
   538                           	opt stack 0
   539  000025                     ES_DeQueue@pThisQueue:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x24
   543  000025                     	ds	1
   544  000026                     ES_EnQueueFIFO@pThisQueue:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x25
   548  000026                     	ds	2
   549  000028                     ES_PostToService@TheEvent:
   550                           	opt stack 0
   551                           
   552                           ; 3 bytes @ 0x27
   553  000028                     	ds	3
   554  00002B                     ??_ES_PostToService:
   555                           
   556                           ; 1 bytes @ 0x2A
   557  00002B                     	ds	2
   558  00002D                     ES_PostToService@WhichService:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x2C
   562  00002D                     	ds	1
   563  00002E                     InitToggleService@ThisEvent:
   564                           	opt stack 0
   565  00002E                     PostToggleService@ThisEvent:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x2D
   569  00002E                     	ds	3
   570  000031                     ES_Run@HighestPrior:
   571                           	opt stack 0
   572  000031                     InitToggleService@Priority:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x30
   576  000031                     	ds	1
   577  000032                     ES_Initialize@i:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x31
   581  000032                     	ds	1
   582  000033                     tblptru	equ	0xFF8
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           ; 1 bytes @ 0x32
   587 ;;
   588 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   589 ;;
   590 ;; *************** function _main *****************
   591 ;; Defined at:
   592 ;;		line 75 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  ErrorType       1    8[BANK0 ] enum E15672
   597 ;; Return value:  Size  Location     Type
   598 ;;                  2  350[None  ] int 
   599 ;; Registers used:
   600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   606 ;;      Params:         0       0       0       0
   607 ;;      Locals:         0       1       0       0
   608 ;;      Temps:          0       0       0       0
   609 ;;      Totals:         0       1       0       0
   610 ;;Total ram usage:        1 bytes
   611 ;; Hardware stack levels required when called:    8
   612 ;; This function calls:
   613 ;;		_ES_Initialize
   614 ;;		_ES_Run
   615 ;;		_printf
   616 ;; This function is called by:
   617 ;;		Startup code after reset
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           	psect	text0
   622  000818                     __ptext0:
   623                           	opt stack 0
   624  000818                     _main:
   625                           	opt stack 23
   626                           
   627                           ;main.c: 78: IRCF0 = 1;
   628                           
   629                           ;incstack = 0
   630  000818  88D3               	bsf	4051,4,c	;volatile
   631                           
   632                           ;main.c: 79: IRCF1 = 1;
   633  00081A  8AD3               	bsf	4051,5,c	;volatile
   634                           
   635                           ;main.c: 80: IRCF2 = 1;
   636  00081C  8CD3               	bsf	4051,6,c	;volatile
   637                           
   638                           ;main.c: 87: ES_Return_t ErrorType;
   639                           ;main.c: 90: PORTA = 0b00000000;
   640  00081E  0E00               	movlw	0
   641  000820  6E80               	movwf	3968,c	;volatile
   642                           
   643                           ;main.c: 91: PORTB = 0b00000000;
   644  000822  0E00               	movlw	0
   645  000824  6E81               	movwf	3969,c	;volatile
   646                           
   647                           ;main.c: 92: PORTC = 0b00000000;
   648  000826  0E00               	movlw	0
   649  000828  6E82               	movwf	3970,c	;volatile
   650                           
   651                           ;main.c: 95: LATA = 0b00000000;
   652  00082A  0E00               	movlw	0
   653  00082C  6E89               	movwf	3977,c	;volatile
   654                           
   655                           ;main.c: 96: LATB = 0b00000000;
   656  00082E  0E00               	movlw	0
   657  000830  6E8A               	movwf	3978,c	;volatile
   658                           
   659                           ;main.c: 97: LATC = 0b00000000;
   660  000832  0E00               	movlw	0
   661  000834  6E8B               	movwf	3979,c	;volatile
   662                           
   663                           ;main.c: 100: ADCON1bits.PCFG = 0xF;
   664  000836  80C1               	bsf	4033,0,c	;volatile
   665  000838  82C1               	bsf	4033,1,c	;volatile
   666  00083A  84C1               	bsf	4033,2,c	;volatile
   667  00083C  86C1               	bsf	4033,3,c	;volatile
   668                           
   669                           ;main.c: 106: TRISA = 0b00000000;
   670  00083E  0E00               	movlw	0
   671  000840  6E92               	movwf	3986,c	;volatile
   672                           
   673                           ;main.c: 107: TRISB = 0b10111111;
   674  000842  0EBF               	movlw	191
   675  000844  6E93               	movwf	3987,c	;volatile
   676                           
   677                           ;main.c: 108: TRISC = 0b11100011;
   678  000846  0EE3               	movlw	227
   679  000848  6E94               	movwf	3988,c	;volatile
   680                           
   681                           ;main.c: 111: LATA0 = 0;
   682  00084A  9089               	bcf	3977,0,c	;volatile
   683                           
   684                           ;main.c: 112: LATA1 = 0;
   685  00084C  9289               	bcf	3977,1,c	;volatile
   686                           
   687                           ;main.c: 113: LATA2 = 1;
   688  00084E  8489               	bsf	3977,2,c	;volatile
   689                           
   690                           ;main.c: 129: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   691  000850  0E9C               	movlw	156
   692  000852  0100               	movlb	0	; () banked
   693  000854  6F93               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   694  000856  0E3F               	movlw	63
   695  000858  6F92               	movwf	ES_Initialize@NewRate& (0+255),b
   696  00085A  EC46  F003         	call	_ES_Initialize	;wreg free
   697  00085E  0100               	movlb	0	; () banked
   698  000860  6F9A               	movwf	main@ErrorType& (0+255),b
   699                           
   700                           ; BSR set to: 0
   701                           ;main.c: 130: if ( ErrorType == Success ) {
   702  000862  0100               	movlb	0	; () banked
   703  000864  519A               	movf	main@ErrorType& (0+255),w,b
   704  000866  0100               	movlb	0	; () banked
   705  000868  A4D8               	btfss	status,2,c
   706  00086A  D021               	goto	l2506
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 132: ErrorType = ES_Run();
   710  00086C  ECD6  F002         	call	_ES_Run	;wreg free
   711  000870  0100               	movlb	0	; () banked
   712  000872  6F9A               	movwf	main@ErrorType& (0+255),b
   713                           
   714                           ; BSR set to: 0
   715                           ;main.c: 134: }
   716                           ;main.c: 136: switch (ErrorType){
   717  000874  D01C               	goto	l2506
   718  000876                     l2496:
   719                           
   720                           ; BSR set to: 0
   721                           ;main.c: 138: printf("Failed on attempt to Post\n");
   722  000876  0E5B               	movlw	low STR_1
   723  000878  6E11               	movwf	printf@f,c
   724  00087A  0E03               	movlw	high STR_1
   725  00087C  6E12               	movwf	printf@f+1,c
   726  00087E  ECFE  F005         	call	_printf	;wreg free
   727                           
   728                           ;main.c: 139: break;
   729  000882  D021               	goto	l358
   730  000884                     l2498:
   731                           
   732                           ;main.c: 141: printf("Failed on NULL pointer\n");
   733  000884  0E76               	movlw	low STR_2
   734  000886  6E11               	movwf	printf@f,c
   735  000888  0E03               	movlw	high STR_2
   736  00088A  6E12               	movwf	printf@f+1,c
   737  00088C  ECFE  F005         	call	_printf	;wreg free
   738                           
   739                           ;main.c: 142: break;
   740  000890  D01A               	goto	l358
   741  000892                     l2500:
   742                           
   743                           ;main.c: 144: printf("Failed Initialization\n");
   744  000892  0E8E               	movlw	low STR_3
   745  000894  6E11               	movwf	printf@f,c
   746  000896  0E03               	movlw	high STR_3
   747  000898  6E12               	movwf	printf@f+1,c
   748  00089A  ECFE  F005         	call	_printf	;wreg free
   749                           
   750                           ;main.c: 145: break;
   751  00089E  D013               	goto	l358
   752  0008A0                     l2502:
   753                           
   754                           ;main.c: 147: printf("Other Failure\n");
   755  0008A0  0EA5               	movlw	low STR_4
   756  0008A2  6E11               	movwf	printf@f,c
   757  0008A4  0E03               	movlw	high STR_4
   758  0008A6  6E12               	movwf	printf@f+1,c
   759  0008A8  ECFE  F005         	call	_printf	;wreg free
   760                           
   761                           ;main.c: 149: }
   762                           
   763                           ;main.c: 148: break;
   764  0008AC  D00C               	goto	l358
   765  0008AE                     l2506:
   766  0008AE  0100               	movlb	0	; () banked
   767  0008B0  519A               	movf	main@ErrorType& (0+255),w,b
   768                           
   769                           ; Switch size 1, requested type "space"
   770                           ; Number of cases is 3, Range of values is 1 to 5
   771                           ; switch strategies available:
   772                           ; Name         Instructions Cycles
   773                           ; simple_byte           10     6 (average)
   774                           ;	Chosen strategy is simple_byte
   775  0008B2  0A01               	xorlw	1	; case 1
   776  0008B4  B4D8               	btfsc	status,2,c
   777  0008B6  D7DF               	goto	l2496
   778  0008B8  0A02               	xorlw	2	; case 3
   779  0008BA  B4D8               	btfsc	status,2,c
   780  0008BC  D7E3               	goto	l2498
   781  0008BE  0A06               	xorlw	6	; case 5
   782  0008C0  B4D8               	btfsc	status,2,c
   783  0008C2  D7E7               	goto	l2500
   784  0008C4  D7ED               	goto	l2502
   785  0008C6                     l358:
   786                           
   787                           ;main.c: 151: ;
   788  0008C6  D7FF               	goto	l358
   789  0008C8                     __end_of_main:
   790                           	opt stack 0
   791                           tblptru	equ	0xFF8
   792                           postinc0	equ	0xFEE
   793                           wreg	equ	0xFE8
   794                           status	equ	0xFD8
   795                           
   796 ;; *************** function _printf *****************
   797 ;; Defined at:
   798 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  f               2   16[COMRAM] PTR const unsigned char 
   801 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  tmpval          4    0        struct .
   804 ;;  cp              3    0        PTR const unsigned char 
   805 ;;  ap              2   18[COMRAM] PTR void [1]
   806 ;;		 -> ?_printf(2), 
   807 ;;  len             2    0        unsigned int 
   808 ;;  val             2    0        unsigned int 
   809 ;;  c               1   20[COMRAM] char 
   810 ;;  flag            1    0        unsigned char 
   811 ;;  prec            1    0        char 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  2   16[COMRAM] int 
   814 ;; Registers used:
   815 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   821 ;;      Params:         2       0       0       0
   822 ;;      Locals:         3       0       0       0
   823 ;;      Temps:          0       0       0       0
   824 ;;      Totals:         5       0       0       0
   825 ;;Total ram usage:        5 bytes
   826 ;; Hardware stack levels used:    1
   827 ;; Hardware stack levels required when called:    2
   828 ;; This function calls:
   829 ;;		_putch
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text1
   836  000BFC                     __ptext1:
   837                           	opt stack 0
   838  000BFC                     _printf:
   839                           	opt stack 28
   840                           
   841                           ;doprnt.c: 466: va_list ap;
   842                           ;doprnt.c: 499: signed char c;
   843                           ;doprnt.c: 506: signed char prec;
   844                           ;doprnt.c: 508: unsigned char flag;
   845                           ;doprnt.c: 523: union {
   846                           ;doprnt.c: 524: unsigned long vd;
   847                           ;doprnt.c: 525: double integ;
   848                           ;doprnt.c: 526: } tmpval;
   849                           ;doprnt.c: 528: unsigned int val;
   850                           ;doprnt.c: 529: unsigned len;
   851                           ;doprnt.c: 530: const char * cp;
   852                           ;doprnt.c: 533: *ap = __va_start();
   853                           
   854                           ;incstack = 0
   855  000BFC  0E13               	movlw	low (?_printf+2)
   856  000BFE  6E13               	movwf	printf@ap,c
   857  000C00  0E00               	movlw	high (?_printf+2)
   858  000C02  6E14               	movwf	printf@ap+1,c
   859                           
   860                           ;doprnt.c: 536: while(c = *f++) {
   861  000C04  D003               	goto	l2352
   862  000C06                     l2350:
   863                           
   864                           ;doprnt.c: 540: {
   865                           ;doprnt.c: 541: (putch(c) );
   866  000C06  5015               	movf	printf@c,w,c
   867  000C08  EC78  F006         	call	_putch
   868  000C0C                     l2352:
   869  000C0C  C011  FFF6         	movff	printf@f,tblptrl
   870  000C10  C012  FFF7         	movff	printf@f+1,tblptrh
   871  000C14  4A11               	infsnz	printf@f,f,c
   872  000C16  2A12               	incf	printf@f+1,f,c
   873  000C18                     	if	0	;tblptru may be non-zero
   874  000C18                     	endif
   875  000C18                     	if	0	;tblptru may be non-zero
   876  000C18                     	endif
   877  000C18  0008               	tblrd		*
   878  000C1A  CFF5 F015          	movff	tablat,printf@c
   879  000C1E  5015               	movf	printf@c,w,c
   880  000C20  B4D8               	btfsc	status,2,c
   881  000C22  0012               	return	
   882  000C24  D7F0               	goto	l2350
   883  000C26                     __end_of_printf:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           status	equ	0xFD8
   892                           
   893 ;; *************** function _putch *****************
   894 ;; Defined at:
   895 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\putch.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  c               1    wreg     unsigned char 
   898 ;; Auto vars:     Size  Location     Type
   899 ;;  c               1    0[COMRAM] unsigned char 
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		wreg
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   909 ;;      Params:         0       0       0       0
   910 ;;      Locals:         0       0       0       0
   911 ;;      Temps:          0       0       0       0
   912 ;;      Totals:         0       0       0       0
   913 ;;Total ram usage:        0 bytes
   914 ;; Hardware stack levels used:    1
   915 ;; Hardware stack levels required when called:    1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_printf
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text2
   924  000CF0                     __ptext2:
   925                           	opt stack 0
   926  000CF0                     _putch:
   927                           	opt stack 28
   928                           
   929                           ;incstack = 0
   930  000CF0  0012               	return		;funcret
   931  000CF2                     __end_of_putch:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           status	equ	0xFD8
   940                           
   941 ;; *************** function _ES_Run *****************
   942 ;; Defined at:
   943 ;;		line 277 in file "ES_Framework.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  HighestPrior    1   48[COMRAM] unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      enum E15499
   950 ;; Registers used:
   951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   957 ;;      Params:         0       0       0       0
   958 ;;      Locals:         1       0       0       0
   959 ;;      Temps:          0       4       0       0
   960 ;;      Totals:         1       4       0       0
   961 ;;Total ram usage:        5 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    7
   964 ;; This function calls:
   965 ;;		_ES_CheckUserEvents
   966 ;;		_ES_DeQueue
   967 ;;		_ES_GetMSBitSet
   968 ;;		_RunToggleService
   969 ;;		__HW_Process_Pending_Ints
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text3
   976  0005AC                     __ptext3:
   977                           	opt stack 0
   978  0005AC                     _ES_Run:
   979                           	opt stack 23
   980                           
   981                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   982                           
   983                           ;incstack = 0
   984                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   985                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   986                           ;ES_Framework.c: 282: while(1){
   987  0005AC  D063               	goto	l2338
   988  0005AE                     l2326:
   989                           
   990                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   991  0005AE  C03C  F011         	movff	_Ready,ES_GetMSBitSet@Val2Check
   992  0005B2  C03D  F012         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   993  0005B6  ECB1  F004         	call	_ES_GetMSBitSet	;wreg free
   994  0005BA  6E31               	movwf	ES_Run@HighestPrior,c
   995                           
   996                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   997  0005BC  5031               	movf	ES_Run@HighestPrior,w,c
   998  0005BE  0D03               	mullw	3
   999  0005C0  0E54               	movlw	low _EventQueues
  1000  0005C2  24F3               	addwf	prodl,w,c
  1001  0005C4  6EF6               	movwf	tblptrl,c
  1002  0005C6  0E03               	movlw	high _EventQueues
  1003  0005C8  20F4               	addwfc	prodh,w,c
  1004  0005CA  6EF7               	movwf	tblptrh,c
  1005  0005CC                     	if	0	;There are less than 3 active tblptr bytes
  1006  0005CC                     	endif
  1007  0005CC  0009               	tblrd		*+
  1008  0005CE  CFF5 F01D          	movff	tablat,ES_DeQueue@pBlock
  1009  0005D2  000A               	tblrd		*-
  1010  0005D4  CFF5 F01E          	movff	tablat,ES_DeQueue@pBlock+1
  1011  0005D8  0E4C               	movlw	low ES_Run@ThisEvent
  1012  0005DA  6E1F               	movwf	ES_DeQueue@pReturnEvent,c
  1013  0005DC  0E00               	movlw	high ES_Run@ThisEvent
  1014  0005DE  6E20               	movwf	ES_DeQueue@pReturnEvent+1,c
  1015  0005E0  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1016  0005E4  0900               	iorlw	0
  1017  0005E6  A4D8               	btfss	status,2,c
  1018  0005E8  D01C               	goto	l2332
  1019                           
  1020                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1021  0005EA  5031               	movf	ES_Run@HighestPrior,w,c
  1022  0005EC  0D02               	mullw	2
  1023  0005EE  0E01               	movlw	low _BitNum2SetMask
  1024  0005F0  24F3               	addwf	prodl,w,c
  1025  0005F2  6EF6               	movwf	tblptrl,c
  1026  0005F4  0E03               	movlw	high _BitNum2SetMask
  1027  0005F6  20F4               	addwfc	prodh,w,c
  1028  0005F8  6EF7               	movwf	tblptrh,c
  1029  0005FA                     	if	0	;There are less than 3 active tblptr bytes
  1030  0005FA                     	endif
  1031  0005FA  0009               	tblrd		*+
  1032  0005FC  CFF5 F096          	movff	tablat,??_ES_Run
  1033  000600  0009               	tblrd		*+
  1034  000602  CFF5 F097          	movff	tablat,??_ES_Run+1
  1035  000606  0100               	movlb	0	; () banked
  1036  000608  1D96               	comf	??_ES_Run& (0+255),w,b
  1037  00060A  0100               	movlb	0	; () banked
  1038  00060C  6F98               	movwf	(??_ES_Run+2)& (0+255),b
  1039  00060E  0100               	movlb	0	; () banked
  1040  000610  1D97               	comf	(??_ES_Run+1)& (0+255),w,b
  1041  000612  0100               	movlb	0	; () banked
  1042  000614  6F99               	movwf	(??_ES_Run+3)& (0+255),b
  1043  000616  0100               	movlb	0	; () banked
  1044  000618  5198               	movf	(??_ES_Run+2)& (0+255),w,b
  1045  00061A  163C               	andwf	_Ready,f,c
  1046  00061C  0100               	movlb	0	; () banked
  1047  00061E  5199               	movf	(??_ES_Run+3)& (0+255),w,b
  1048  000620  163D               	andwf	_Ready+1,f,c
  1049  000622                     l2332:
  1050                           
  1051                           ;ES_Framework.c: 291: }
  1052                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType !=
  1053                           ;ES_Framework.c: 293: ES_NO_EVENT) {
  1054  000622  C04C  F016         	movff	ES_Run@ThisEvent,RunToggleService@ThisEvent
  1055  000626  C04D  F017         	movff	ES_Run@ThisEvent+1,RunToggleService@ThisEvent+1
  1056  00062A  C04E  F018         	movff	ES_Run@ThisEvent+2,RunToggleService@ThisEvent+2
  1057  00062E  5031               	movf	ES_Run@HighestPrior,w,c
  1058  000630  0D04               	mullw	4
  1059  000632  0E02               	movlw	2
  1060  000634  26F3               	addwf	prodl,f,c
  1061  000636  0E00               	movlw	0
  1062  000638  22F4               	addwfc	prodh,f,c
  1063  00063A  0E50               	movlw	low _ServDescList
  1064  00063C  24F3               	addwf	prodl,w,c
  1065  00063E  6EF6               	movwf	tblptrl,c
  1066  000640  0E03               	movlw	high _ServDescList
  1067  000642  20F4               	addwfc	prodh,w,c
  1068  000644  6EF7               	movwf	tblptrh,c
  1069  000646                     	if	0	;There are less than 3 active tblptr bytes
  1070  000646                     	endif
  1071  000646  D801               	call	u1658
  1072  000648  D00C               	goto	u1659
  1073  00064A                     u1658:
  1074  00064A  0005               	push	
  1075  00064C  6EFA               	movwf	pclath,c
  1076  00064E  0009               	tblrd		*+
  1077  000650  50F5               	movf	tablat,w,c
  1078  000652  6EFD               	movwf	tosl,c
  1079  000654  0009               	tblrd		*+
  1080  000656  50F5               	movf	tablat,w,c
  1081  000658  6EFE               	movwf	tosh,c
  1082  00065A  50F8               	movf	tblptru,w,c
  1083  00065C  6EFF               	movwf	tosu,c
  1084  00065E  50FA               	movf	pclath,w,c
  1085  000660  0012               	return		;indir
  1086  000662                     u1659:
  1087  000662  0E16               	movlw	low ?_RunToggleService
  1088  000664  6ED9               	movwf	fsr2l,c
  1089  000666  0E00               	movlw	high ?_RunToggleService
  1090  000668  6EDA               	movwf	fsr2h,c
  1091  00066A  50DF               	movf	indf2,w,c
  1092  00066C  B4D8               	btfsc	status,2,c
  1093  00066E  D002               	goto	l2338
  1094                           
  1095                           ;ES_Framework.c: 294: return FailedRun;
  1096  000670  0E02               	movlw	2
  1097  000672  0012               	return	
  1098  000674                     l2338:
  1099  000674  EC66  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1100  000678  0900               	iorlw	0
  1101  00067A  B4D8               	btfsc	status,2,c
  1102  00067C  D004               	goto	l2342
  1103  00067E  503C               	movf	_Ready,w,c
  1104  000680  103D               	iorwf	_Ready+1,w,c
  1105  000682  A4D8               	btfss	status,2,c
  1106  000684  D794               	goto	l2326
  1107  000686                     l2342:
  1108                           
  1109                           ;ES_Framework.c: 295: }
  1110                           ;ES_Framework.c: 296: }
  1111                           ;ES_Framework.c: 299: ES_CheckUserEvents();
  1112  000686  EC8A  F005         	call	_ES_CheckUserEvents	;wreg free
  1113  00068A  D7F4               	goto	l2338
  1114  00068C                     __end_of_ES_Run:
  1115                           	opt stack 0
  1116                           tosu	equ	0xFFF
  1117                           tosh	equ	0xFFE
  1118                           tosl	equ	0xFFD
  1119                           pclath	equ	0xFFA
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           prodh	equ	0xFF4
  1125                           prodl	equ	0xFF3
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           indf2	equ	0xFDF
  1129                           fsr2h	equ	0xFDA
  1130                           fsr2l	equ	0xFD9
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function __HW_Process_Pending_Ints *****************
  1134 ;; Defined at:
  1135 ;;		line 224 in file "ES_Port.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      unsigned char 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1149 ;;      Params:         0       0       0       0
  1150 ;;      Locals:         0       0       0       0
  1151 ;;      Temps:          0       0       0       0
  1152 ;;      Totals:         0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    6
  1156 ;; This function calls:
  1157 ;;		_ES_Timer_Tick_Resp
  1158 ;; This function is called by:
  1159 ;;		_ES_Run
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text4
  1164  000CCC                     __ptext4:
  1165                           	opt stack 0
  1166  000CCC                     __HW_Process_Pending_Ints:
  1167                           	opt stack 23
  1168                           
  1169                           ;ES_Port.c: 226: while (TickCount > 0)
  1170                           
  1171                           ;incstack = 0
  1172  000CCC  D003               	goto	l2254
  1173  000CCE                     l2250:
  1174                           
  1175                           ;ES_Port.c: 227: {
  1176                           ;ES_Port.c: 229: ES_Timer_Tick_Resp();
  1177  000CCE  EC5A  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1178                           
  1179                           ;ES_Port.c: 230: TickCount--;
  1180  000CD2  064B               	decf	_TickCount,f,c	;volatile
  1181  000CD4                     l2254:
  1182  000CD4  504B               	movf	_TickCount,w,c	;volatile
  1183  000CD6  A4D8               	btfss	status,2,c
  1184  000CD8  D7FA               	goto	l2250
  1185                           
  1186                           ;ES_Port.c: 231: }
  1187                           ;ES_Port.c: 245: return 1;
  1188  000CDA  0E01               	movlw	1
  1189  000CDC  0012               	return	
  1190  000CDE                     __end_of__HW_Process_Pending_Ints:
  1191                           	opt stack 0
  1192                           tosu	equ	0xFFF
  1193                           tosh	equ	0xFFE
  1194                           tosl	equ	0xFFD
  1195                           pclath	equ	0xFFA
  1196                           tblptru	equ	0xFF8
  1197                           tblptrh	equ	0xFF7
  1198                           tblptrl	equ	0xFF6
  1199                           tablat	equ	0xFF5
  1200                           prodh	equ	0xFF4
  1201                           prodl	equ	0xFF3
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           indf2	equ	0xFDF
  1205                           fsr2h	equ	0xFDA
  1206                           fsr2l	equ	0xFD9
  1207                           status	equ	0xFD8
  1208                           
  1209 ;; *************** function _ES_Timer_Tick_Resp *****************
  1210 ;; Defined at:
  1211 ;;		line 284 in file "ES_Timers.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1225 ;;      Params:         0       0       0       0
  1226 ;;      Locals:         0       0       0       0
  1227 ;;      Temps:          0       4       0       0
  1228 ;;      Totals:         0       4       0       0
  1229 ;;Total ram usage:        4 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    5
  1232 ;; This function calls:
  1233 ;;		Absolute function
  1234 ;;		_ES_GetMSBitSet
  1235 ;;		_PostToggleService
  1236 ;; This function is called by:
  1237 ;;		__HW_Process_Pending_Ints
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text5
  1242  0004B4                     __ptext5:
  1243                           	opt stack 0
  1244  0004B4                     _ES_Timer_Tick_Resp:
  1245                           	opt stack 23
  1246                           
  1247                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1248                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1249                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1250                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1251                           
  1252                           ;incstack = 0
  1253  0004B4  5040               	movf	_TMR_ActiveFlags,w,c
  1254  0004B6  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1255  0004B8  B4D8               	btfsc	status,2,c
  1256  0004BA  0012               	return	
  1257                           
  1258                           ;ES_Timers.c: 291: {
  1259                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1260  0004BC  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1261  0004C0  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1262  0004C4                     l2144:
  1263                           
  1264                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1265  0004C4  C036  F011         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1266  0004C8  C037  F012         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1267  0004CC  ECB1  F004         	call	_ES_GetMSBitSet	;wreg free
  1268  0004D0  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1269                           
  1270                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1271  0004D2  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1272  0004D4  0D02               	mullw	2
  1273  0004D6  0E60               	movlw	low _TMR_TimerArray
  1274  0004D8  24F3               	addwf	prodl,w,c
  1275  0004DA  6ED9               	movwf	fsr2l,c
  1276  0004DC  0E00               	movlw	high _TMR_TimerArray
  1277  0004DE  20F4               	addwfc	prodh,w,c
  1278  0004E0  6EDA               	movwf	fsr2h,c
  1279  0004E2  06DE               	decf	postinc2,f,c
  1280  0004E4  0E00               	movlw	0
  1281  0004E6  5ADD               	subwfb	postdec2,f,c
  1282  0004E8  50DE               	movf	postinc2,w,c
  1283  0004EA  10DE               	iorwf	postinc2,w,c
  1284  0004EC  A4D8               	btfss	status,2,c
  1285  0004EE  D03D               	goto	l2156
  1286                           
  1287                           ;ES_Timers.c: 299: {
  1288                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1289  0004F0  0E03               	movlw	3
  1290  0004F2  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1291                           
  1292                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1293  0004F4  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1294  0004F8  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1295                           
  1296                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1297  0004FA  C033  F02E         	movff	ES_Timer_Tick_Resp@NewEvent,PostToggleService@ThisEvent
  1298  0004FE  C034  F02F         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostToggleService@ThisEvent+1
  1299  000502  C035  F030         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostToggleService@ThisEvent+2
  1300  000506  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1301  000508  0D02               	mullw	2
  1302  00050A  0E21               	movlw	low _Timer2PostFunc
  1303  00050C  24F3               	addwf	prodl,w,c
  1304  00050E  6EF6               	movwf	tblptrl,c
  1305  000510  0E03               	movlw	high _Timer2PostFunc
  1306  000512  20F4               	addwfc	prodh,w,c
  1307  000514  6EF7               	movwf	tblptrh,c
  1308  000516                     	if	0	;There are less than 3 active tblptr bytes
  1309  000516                     	endif
  1310  000516  D801               	call	u1418
  1311  000518  D00C               	goto	l2154
  1312  00051A                     u1418:
  1313  00051A  0005               	push	
  1314  00051C  6EFA               	movwf	pclath,c
  1315  00051E  0009               	tblrd		*+
  1316  000520  50F5               	movf	tablat,w,c
  1317  000522  6EFD               	movwf	tosl,c
  1318  000524  0009               	tblrd		*+
  1319  000526  50F5               	movf	tablat,w,c
  1320  000528  6EFE               	movwf	tosh,c
  1321  00052A  50F8               	movf	tblptru,w,c
  1322  00052C  6EFF               	movwf	tosu,c
  1323  00052E  50FA               	movf	pclath,w,c
  1324  000530  0012               	return		;indir
  1325  000532                     l2154:
  1326                           
  1327                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1328  000532  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1329  000534  0D02               	mullw	2
  1330  000536  0E01               	movlw	low _BitNum2SetMask
  1331  000538  24F3               	addwf	prodl,w,c
  1332  00053A  6EF6               	movwf	tblptrl,c
  1333  00053C  0E03               	movlw	high _BitNum2SetMask
  1334  00053E  20F4               	addwfc	prodh,w,c
  1335  000540  6EF7               	movwf	tblptrh,c
  1336  000542                     	if	0	;There are less than 3 active tblptr bytes
  1337  000542                     	endif
  1338  000542  0009               	tblrd		*+
  1339  000544  CFF5 F092          	movff	tablat,??_ES_Timer_Tick_Resp
  1340  000548  0009               	tblrd		*+
  1341  00054A  CFF5 F093          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1342  00054E  0100               	movlb	0	; () banked
  1343  000550  1D92               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1344  000552  0100               	movlb	0	; () banked
  1345  000554  6F94               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1346  000556  0100               	movlb	0	; () banked
  1347  000558  1D93               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1348  00055A  0100               	movlb	0	; () banked
  1349  00055C  6F95               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1350  00055E  0100               	movlb	0	; () banked
  1351  000560  5194               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1352  000562  1640               	andwf	_TMR_ActiveFlags,f,c
  1353  000564  0100               	movlb	0	; () banked
  1354  000566  5195               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1355  000568  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1356  00056A                     l2156:
  1357                           
  1358                           ;ES_Timers.c: 306: }
  1359                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1360  00056A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1361  00056C  0D02               	mullw	2
  1362  00056E  0E01               	movlw	low _BitNum2SetMask
  1363  000570  24F3               	addwf	prodl,w,c
  1364  000572  6EF6               	movwf	tblptrl,c
  1365  000574  0E03               	movlw	high _BitNum2SetMask
  1366  000576  20F4               	addwfc	prodh,w,c
  1367  000578  6EF7               	movwf	tblptrh,c
  1368  00057A                     	if	0	;There are less than 3 active tblptr bytes
  1369  00057A                     	endif
  1370  00057A  0009               	tblrd		*+
  1371  00057C  CFF5 F092          	movff	tablat,??_ES_Timer_Tick_Resp
  1372  000580  0009               	tblrd		*+
  1373  000582  CFF5 F093          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1374  000586  0100               	movlb	0	; () banked
  1375  000588  1D92               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1376  00058A  0100               	movlb	0	; () banked
  1377  00058C  6F94               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1378  00058E  0100               	movlb	0	; () banked
  1379  000590  1D93               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1380  000592  0100               	movlb	0	; () banked
  1381  000594  6F95               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1382  000596  0100               	movlb	0	; () banked
  1383  000598  5194               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1384  00059A  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1385  00059C  0100               	movlb	0	; () banked
  1386  00059E  5195               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1387  0005A0  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1391  0005A2  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1392  0005A4  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1393  0005A6  B4D8               	btfsc	status,2,c
  1394  0005A8  0012               	return	
  1395  0005AA  D78C               	goto	l2144
  1396  0005AC                     __end_of_ES_Timer_Tick_Resp:
  1397                           	opt stack 0
  1398                           tosu	equ	0xFFF
  1399                           tosh	equ	0xFFE
  1400                           tosl	equ	0xFFD
  1401                           pclath	equ	0xFFA
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           prodh	equ	0xFF4
  1407                           prodl	equ	0xFF3
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           indf2	equ	0xFDF
  1411                           postinc2	equ	0xFDE
  1412                           postdec2	equ	0xFDD
  1413                           fsr2h	equ	0xFDA
  1414                           fsr2l	equ	0xFD9
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _PostToggleService *****************
  1418 ;; Defined at:
  1419 ;;		line 103 in file "ToggleService.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  ThisEvent       3   45[COMRAM] struct ES_Event_t
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;		None
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      unsigned char 
  1426 ;; Registers used:
  1427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1433 ;;      Params:         3       0       0       0
  1434 ;;      Locals:         0       0       0       0
  1435 ;;      Temps:          0       0       0       0
  1436 ;;      Totals:         3       0       0       0
  1437 ;;Total ram usage:        3 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    4
  1440 ;; This function calls:
  1441 ;;		_ES_PostToService
  1442 ;; This function is called by:
  1443 ;;		_ES_Timer_Tick_Resp
  1444 ;;		_PostToList
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text6
  1449  000CB8                     __ptext6:
  1450                           	opt stack 0
  1451  000CB8                     _PostToggleService:
  1452                           	opt stack 23
  1453                           
  1454                           ;ToggleService.c: 105: return ES_PostToService( MyPriority, ThisEvent);
  1455                           
  1456                           ;incstack = 0
  1457  000CB8  C02E  F028         	movff	PostToggleService@ThisEvent,ES_PostToService@TheEvent
  1458  000CBC  C02F  F029         	movff	PostToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  1459  000CC0  C030  F02A         	movff	PostToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  1460  000CC4  5046               	movf	ToggleService@MyPriority,w,c
  1461  000CC6  EC57  F005         	call	_ES_PostToService
  1462  000CCA  0012               	return	
  1463  000CCC                     __end_of_PostToggleService:
  1464                           	opt stack 0
  1465                           tosu	equ	0xFFF
  1466                           tosh	equ	0xFFE
  1467                           tosl	equ	0xFFD
  1468                           pclath	equ	0xFFA
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           prodh	equ	0xFF4
  1474                           prodl	equ	0xFF3
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           indf2	equ	0xFDF
  1478                           postinc2	equ	0xFDE
  1479                           postdec2	equ	0xFDD
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _ES_GetMSBitSet *****************
  1485 ;; Defined at:
  1486 ;;		line 79 in file "ES_LookupTables.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  Val2Check       2   16[COMRAM] unsigned int 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  LoopCntr        1   25[COMRAM] char 
  1491 ;;  Nybble2Test     1   24[COMRAM] unsigned char 
  1492 ;;  ReturnVal       1   23[COMRAM] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      unsigned char 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1502 ;;      Params:         2       0       0       0
  1503 ;;      Locals:         3       0       0       0
  1504 ;;      Temps:          5       0       0       0
  1505 ;;      Totals:        10       0       0       0
  1506 ;;Total ram usage:       10 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_ES_Run
  1513 ;;		_ES_Timer_Tick_Resp
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text7
  1518  000962                     __ptext7:
  1519                           	opt stack 0
  1520  000962                     _ES_GetMSBitSet:
  1521                           	opt stack 26
  1522                           
  1523                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1524                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1525                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1526                           
  1527                           ;incstack = 0
  1528  000962  0E80               	movlw	128
  1529  000964  6E18               	movwf	ES_GetMSBitSet@ReturnVal,c
  1530                           
  1531                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1532  000966  0E03               	movlw	3
  1533  000968  6E1A               	movwf	ES_GetMSBitSet@LoopCntr,c
  1534  00096A                     l2114:
  1535                           
  1536                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1537  00096A  BE1A               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1538  00096C  D031               	goto	l2128
  1539                           
  1540                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1541                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1542                           ;ES_LookupTables.c: 91: 0x0F);
  1543  00096E  501A               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1544  000970  0D04               	mullw	4
  1545  000972  CFF3 F013          	movff	prodl,??_ES_GetMSBitSet
  1546  000976  C011  F014         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1547  00097A  C012  F015         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1548  00097E  2A13               	incf	??_ES_GetMSBitSet,f,c
  1549  000980  D003               	goto	u1364
  1550  000982                     u1365:
  1551  000982  90D8               	bcf	status,0,c
  1552  000984  3215               	rrcf	??_ES_GetMSBitSet+2,f,c
  1553  000986  3214               	rrcf	??_ES_GetMSBitSet+1,f,c
  1554  000988                     u1364:
  1555  000988  2E13               	decfsz	??_ES_GetMSBitSet,f,c
  1556  00098A  D7FB               	goto	u1365
  1557  00098C  5014               	movf	??_ES_GetMSBitSet+1,w,c
  1558  00098E  0B0F               	andlw	15
  1559  000990  6E19               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1560                           
  1561                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1562  000992  5019               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1563  000994  B4D8               	btfsc	status,2,c
  1564  000996  D01A               	goto	l2124
  1565                           
  1566                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1567                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1568  000998  0EFF               	movlw	255
  1569  00099A  6E13               	movwf	??_ES_GetMSBitSet& (0+255),c
  1570  00099C  0EFF               	movlw	255
  1571  00099E  6E14               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1572  0009A0  5019               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1573  0009A2  6E15               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1574  0009A4  6A16               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1575  0009A6  5013               	movf	??_ES_GetMSBitSet,w,c
  1576  0009A8  2615               	addwf	??_ES_GetMSBitSet+2,f,c
  1577  0009AA  5014               	movf	??_ES_GetMSBitSet+1,w,c
  1578  0009AC  2216               	addwfc	??_ES_GetMSBitSet+3,f,c
  1579  0009AE  0E41               	movlw	low _Nybble2MSBitNum
  1580  0009B0  2415               	addwf	??_ES_GetMSBitSet+2,w,c
  1581  0009B2  6EF6               	movwf	tblptrl,c
  1582  0009B4  0E03               	movlw	high _Nybble2MSBitNum
  1583  0009B6  2016               	addwfc	??_ES_GetMSBitSet+3,w,c
  1584  0009B8  6EF7               	movwf	tblptrh,c
  1585  0009BA                     	if	0	;There are less than 3 active tblptr bytes
  1586  0009BA                     	endif
  1587  0009BA  0008               	tblrd		*
  1588  0009BC  CFF5 F017          	movff	tablat,??_ES_GetMSBitSet+4
  1589  0009C0  501A               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1590  0009C2  0D04               	mullw	4
  1591  0009C4  50F3               	movf	prodl,w,c
  1592  0009C6  2417               	addwf	??_ES_GetMSBitSet+4,w,c
  1593  0009C8  6E18               	movwf	ES_GetMSBitSet@ReturnVal,c
  1594                           
  1595                           ;ES_LookupTables.c: 96: break;
  1596  0009CA  D002               	goto	l2128
  1597  0009CC                     l2124:
  1598  0009CC  061A               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1599  0009CE  D7CD               	goto	l2114
  1600  0009D0                     l2128:
  1601                           
  1602                           ;ES_LookupTables.c: 97: }
  1603                           ;ES_LookupTables.c: 98: }
  1604                           ;ES_LookupTables.c: 99: return ReturnVal;
  1605  0009D0  5018               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1606  0009D2  0012               	return	
  1607  0009D4                     __end_of_ES_GetMSBitSet:
  1608                           	opt stack 0
  1609                           tosu	equ	0xFFF
  1610                           tosh	equ	0xFFE
  1611                           tosl	equ	0xFFD
  1612                           pclath	equ	0xFFA
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           prodh	equ	0xFF4
  1618                           prodl	equ	0xFF3
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           postdec2	equ	0xFDD
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _RunToggleService *****************
  1629 ;; Defined at:
  1630 ;;		line 125 in file "ToggleService.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  ThisEvent       3   21[COMRAM] struct ES_Event_t
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  ReturnEvent     3   24[COMRAM] struct ES_Event_t
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  3   21[COMRAM] struct ES_Event_t
  1637 ;; Registers used:
  1638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1644 ;;      Params:         3       0       0       0
  1645 ;;      Locals:         3       0       0       0
  1646 ;;      Temps:          0       0       0       0
  1647 ;;      Totals:         6       0       0       0
  1648 ;;Total ram usage:        6 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    2
  1651 ;; This function calls:
  1652 ;;		_ES_Timer_InitTimer
  1653 ;; This function is called by:
  1654 ;;		_ES_Run
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text8
  1659  000B54                     __ptext8:
  1660                           	opt stack 0
  1661  000B54                     _RunToggleService:
  1662                           	opt stack 27
  1663                           
  1664                           ;ToggleService.c: 127: ES_Event ReturnEvent;
  1665                           ;ToggleService.c: 128: ReturnEvent.EventType = ES_NO_EVENT;
  1666                           
  1667                           ;incstack = 0
  1668  000B54  0E00               	movlw	0
  1669  000B56  6E19               	movwf	RunToggleService@ReturnEvent,c
  1670                           
  1671                           ;ToggleService.c: 132: if (ThisEvent.EventType == ES_TIMEOUT) {
  1672  000B58  0E03               	movlw	3
  1673  000B5A  1816               	xorwf	RunToggleService@ThisEvent,w,c
  1674  000B5C  A4D8               	btfss	status,2,c
  1675  000B5E  D010               	goto	l2290
  1676                           
  1677                           ;ToggleService.c: 133: if (ThisEvent.EventParam == 0) {
  1678  000B60  5017               	movf	RunToggleService@ThisEvent+1,w,c
  1679  000B62  1018               	iorwf	RunToggleService@ThisEvent+2,w,c
  1680  000B64  A4D8               	btfss	status,2,c
  1681  000B66  D00C               	goto	l2290
  1682                           
  1683                           ;ToggleService.c: 143: if (PORTCbits.RC2 == 0) {
  1684  000B68  B482               	btfsc	3970,2,c	;volatile
  1685  000B6A  D002               	goto	l383
  1686                           
  1687                           ;ToggleService.c: 144: LATC2 = 1;
  1688  000B6C  848B               	bsf	3979,2,c	;volatile
  1689                           
  1690                           ;ToggleService.c: 145: }
  1691  000B6E  D001               	goto	l2288
  1692  000B70                     l383:
  1693                           
  1694                           ;ToggleService.c: 146: else {
  1695                           ;ToggleService.c: 147: LATC2 = 0;
  1696  000B70  948B               	bcf	3979,2,c	;volatile
  1697  000B72                     l2288:
  1698                           
  1699                           ;ToggleService.c: 148: }
  1700                           ;ToggleService.c: 150: ES_Timer_InitTimer(0,50);
  1701  000B72  0E00               	movlw	0
  1702  000B74  6E12               	movwf	ES_Timer_InitTimer@NewTime+1,c
  1703  000B76  0E32               	movlw	50
  1704  000B78  6E11               	movwf	ES_Timer_InitTimer@NewTime,c
  1705  000B7A  0E00               	movlw	0
  1706  000B7C  EC22  F005         	call	_ES_Timer_InitTimer
  1707  000B80                     l2290:
  1708                           
  1709                           ;ToggleService.c: 151: }
  1710                           ;ToggleService.c: 152: }
  1711                           ;ToggleService.c: 160: return ReturnEvent;
  1712  000B80  C019  F016         	movff	RunToggleService@ReturnEvent,?_RunToggleService
  1713  000B84  C01A  F017         	movff	RunToggleService@ReturnEvent+1,?_RunToggleService+1
  1714  000B88  C01B  F018         	movff	RunToggleService@ReturnEvent+2,?_RunToggleService+2
  1715  000B8C  0012               	return	
  1716  000B8E                     __end_of_RunToggleService:
  1717                           	opt stack 0
  1718                           tosu	equ	0xFFF
  1719                           tosh	equ	0xFFE
  1720                           tosl	equ	0xFFD
  1721                           pclath	equ	0xFFA
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           prodh	equ	0xFF4
  1727                           prodl	equ	0xFF3
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           indf2	equ	0xFDF
  1731                           postinc2	equ	0xFDE
  1732                           postdec2	equ	0xFDD
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _ES_DeQueue *****************
  1738 ;; Defined at:
  1739 ;;		line 164 in file "ES_Queue.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  pBlock          2   28[COMRAM] PTR struct ES_Event_t
  1742 ;;		 -> Queue0(18), 
  1743 ;;  pReturnEvent    2   30[COMRAM] PTR struct ES_Event_t
  1744 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  pThisQueue      2   36[COMRAM] PTR struct .
  1747 ;;		 -> Queue0(18), 
  1748 ;;  NumLeft         1   35[COMRAM] unsigned char 
  1749 ;;  SaveCrit        1   34[COMRAM] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      unsigned char 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1759 ;;      Params:         4       0       0       0
  1760 ;;      Locals:         4       0       0       0
  1761 ;;      Temps:          2       0       0       0
  1762 ;;      Totals:        10       0       0       0
  1763 ;;Total ram usage:       10 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    2
  1766 ;; This function calls:
  1767 ;;		___lbmod
  1768 ;;		___wmul
  1769 ;; This function is called by:
  1770 ;;		_ES_Run
  1771 ;;		_ES_RecallEvents
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text9
  1776  0003B6                     __ptext9:
  1777                           	opt stack 0
  1778  0003B6                     _ES_DeQueue:
  1779                           	opt stack 27
  1780                           
  1781                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  1782                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  1783                           ;ES_Queue.c: 168: uint8_t NumLeft;
  1784                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  1785                           
  1786                           ;incstack = 0
  1787  0003B6  C01D  F025         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  1788  0003BA  C01E  F026         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  1789                           
  1790                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  1791  0003BE  EE20 F002          	lfsr	2,2
  1792  0003C2  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1793  0003C4  26D9               	addwf	fsr2l,f,c
  1794  0003C6  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1795  0003C8  22DA               	addwfc	fsr2h,f,c
  1796  0003CA  50DF               	movf	indf2,w,c
  1797  0003CC  B4D8               	btfsc	status,2,c
  1798  0003CE  D05E               	goto	l2226
  1799                           
  1800                           ;ES_Queue.c: 172: {
  1801                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  1802  0003D0  CFF2 F023          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  1803  0003D4  9EF2               	bcf	intcon,7,c	;volatile
  1804                           
  1805                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  1806  0003D6  EE20 F001          	lfsr	2,1
  1807  0003DA  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1808  0003DC  26D9               	addwf	fsr2l,f,c
  1809  0003DE  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1810  0003E0  22DA               	addwfc	fsr2h,f,c
  1811  0003E2  50DF               	movf	indf2,w,c
  1812  0003E4  6E21               	movwf	??_ES_DeQueue& (0+255),c
  1813  0003E6  0E01               	movlw	1
  1814  0003E8  2421               	addwf	??_ES_DeQueue,w,c
  1815  0003EA  6E17               	movwf	___wmul@multiplier,c
  1816  0003EC  6A18               	clrf	___wmul@multiplier+1,c
  1817  0003EE  0E00               	movlw	0
  1818  0003F0  2218               	addwfc	___wmul@multiplier+1,f,c
  1819  0003F2  0E00               	movlw	0
  1820  0003F4  6E1A               	movwf	___wmul@multiplicand+1,c
  1821  0003F6  0E03               	movlw	3
  1822  0003F8  6E19               	movwf	___wmul@multiplicand,c
  1823  0003FA  EC3B  F006         	call	___wmul	;wreg free
  1824  0003FE  5017               	movf	?___wmul,w,c
  1825  000400  241D               	addwf	ES_DeQueue@pBlock,w,c
  1826  000402  6ED9               	movwf	fsr2l,c
  1827  000404  5018               	movf	?___wmul+1,w,c
  1828  000406  201E               	addwfc	ES_DeQueue@pBlock+1,w,c
  1829  000408  6EDA               	movwf	fsr2h,c
  1830  00040A  C01F  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  1831  00040E  C020  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  1832  000412  CFDE FFE6          	movff	postinc2,postinc1
  1833  000416  CFDE FFE6          	movff	postinc2,postinc1
  1834  00041A  CFDE FFE6          	movff	postinc2,postinc1
  1835                           
  1836                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  1837  00041E  EE20 F001          	lfsr	2,1
  1838  000422  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1839  000424  26D9               	addwf	fsr2l,f,c
  1840  000426  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1841  000428  22DA               	addwfc	fsr2h,f,c
  1842  00042A  2ADF               	incf	indf2,f,c
  1843                           
  1844                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  1845  00042C  C025  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  1846  000430  C026  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  1847  000434  EE10 F001          	lfsr	1,1
  1848  000438  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1849  00043A  26E1               	addwf	fsr1l,f,c
  1850  00043C  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1851  00043E  22E2               	addwfc	fsr1h,f,c
  1852  000440  50DE               	movf	postinc2,w,c
  1853  000442  5CE6               	subwf	postinc1,w,c
  1854  000444  A0D8               	btfss	status,0,c
  1855  000446  D016               	goto	l2222
  1856                           
  1857                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  1858  000448  EE20 F001          	lfsr	2,1
  1859  00044C  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1860  00044E  26D9               	addwf	fsr2l,f,c
  1861  000450  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1862  000452  22DA               	addwfc	fsr2h,f,c
  1863  000454  C025  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  1864  000458  C026  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  1865  00045C  50E7               	movf	indf1,w,c
  1866  00045E  6E11               	movwf	___lbmod@divisor,c
  1867  000460  EE10 F001          	lfsr	1,1
  1868  000464  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1869  000466  26E1               	addwf	fsr1l,f,c
  1870  000468  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1871  00046A  22E2               	addwfc	fsr1h,f,c
  1872  00046C  50E7               	movf	indf1,w,c
  1873  00046E  EC13  F006         	call	___lbmod
  1874  000472  6EDF               	movwf	indf2,c
  1875  000474                     l2222:
  1876                           
  1877                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  1878  000474  EE20 F002          	lfsr	2,2
  1879  000478  5025               	movf	ES_DeQueue@pThisQueue,w,c
  1880  00047A  26D9               	addwf	fsr2l,f,c
  1881  00047C  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  1882  00047E  22DA               	addwfc	fsr2h,f,c
  1883  000480  06DF               	decf	indf2,f,c
  1884  000482  50DF               	movf	indf2,w,c
  1885  000484  6E24               	movwf	ES_DeQueue@NumLeft,c
  1886                           
  1887                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  1888  000486  C023  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  1889                           
  1890                           ;ES_Queue.c: 183: }else {
  1891  00048A  D012               	goto	l2232
  1892  00048C                     l2226:
  1893                           
  1894                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  1895  00048C  C01F  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  1896  000490  C020  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  1897  000494  0E00               	movlw	0
  1898  000496  6EDF               	movwf	indf2,c
  1899                           
  1900                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  1901  000498  EE20 F001          	lfsr	2,1
  1902  00049C  501F               	movf	ES_DeQueue@pReturnEvent,w,c
  1903  00049E  26D9               	addwf	fsr2l,f,c
  1904  0004A0  5020               	movf	ES_DeQueue@pReturnEvent+1,w,c
  1905  0004A2  22DA               	addwfc	fsr2h,f,c
  1906  0004A4  0E00               	movlw	0
  1907  0004A6  6EDE               	movwf	postinc2,c
  1908  0004A8  0E00               	movlw	0
  1909  0004AA  6EDD               	movwf	postdec2,c
  1910                           
  1911                           ;ES_Queue.c: 186: NumLeft = 0;
  1912  0004AC  0E00               	movlw	0
  1913  0004AE  6E24               	movwf	ES_DeQueue@NumLeft,c
  1914  0004B0                     l2232:
  1915                           
  1916                           ;ES_Queue.c: 187: }
  1917                           ;ES_Queue.c: 188: return NumLeft;
  1918  0004B0  5024               	movf	ES_DeQueue@NumLeft,w,c
  1919  0004B2  0012               	return	
  1920  0004B4                     __end_of_ES_DeQueue:
  1921                           	opt stack 0
  1922                           tosu	equ	0xFFF
  1923                           tosh	equ	0xFFE
  1924                           tosl	equ	0xFFD
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           prodh	equ	0xFF4
  1931                           prodl	equ	0xFF3
  1932                           intcon	equ	0xFF2
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           indf1	equ	0xFE7
  1936                           postinc1	equ	0xFE6
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           indf2	equ	0xFDF
  1940                           postinc2	equ	0xFDE
  1941                           postdec2	equ	0xFDD
  1942                           fsr2h	equ	0xFDA
  1943                           fsr2l	equ	0xFD9
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function ___lbmod *****************
  1947 ;; Defined at:
  1948 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  dividend        1    wreg     unsigned char 
  1951 ;;  divisor         1   16[COMRAM] unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  dividend        1   17[COMRAM] unsigned char 
  1954 ;;  rem             1   19[COMRAM] unsigned char 
  1955 ;;  counter         1   18[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      unsigned char 
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1965 ;;      Params:         1       0       0       0
  1966 ;;      Locals:         3       0       0       0
  1967 ;;      Temps:          0       0       0       0
  1968 ;;      Totals:         4       0       0       0
  1969 ;;Total ram usage:        4 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    1
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_ES_DeQueue
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text10
  1980  000C26                     __ptext10:
  1981                           	opt stack 0
  1982  000C26                     ___lbmod:
  1983                           	opt stack 27
  1984                           
  1985                           ;incstack = 0
  1986                           ;___lbmod@dividend stored from wreg
  1987  000C26  6E12               	movwf	___lbmod@dividend,c
  1988  000C28  0E08               	movlw	8
  1989  000C2A  6E13               	movwf	___lbmod@counter,c
  1990  000C2C  0E00               	movlw	0
  1991  000C2E  6E14               	movwf	___lbmod@rem,c
  1992  000C30                     l2178:
  1993  000C30  90D8               	bcf	status,0,c
  1994  000C32  3412               	rlcf	___lbmod@dividend,w,c
  1995  000C34  3414               	rlcf	___lbmod@rem,w,c
  1996  000C36  6E14               	movwf	___lbmod@rem,c
  1997  000C38  90D8               	bcf	status,0,c
  1998  000C3A  3612               	rlcf	___lbmod@dividend,f,c
  1999  000C3C  5011               	movf	___lbmod@divisor,w,c
  2000  000C3E  5C14               	subwf	___lbmod@rem,w,c
  2001  000C40  A0D8               	btfss	status,0,c
  2002  000C42  D002               	goto	l2186
  2003  000C44  5011               	movf	___lbmod@divisor,w,c
  2004  000C46  5E14               	subwf	___lbmod@rem,f,c
  2005  000C48                     l2186:
  2006  000C48  2E13               	decfsz	___lbmod@counter,f,c
  2007  000C4A  D7F2               	goto	l2178
  2008  000C4C  5014               	movf	___lbmod@rem,w,c
  2009  000C4E  0012               	return	
  2010  000C50                     __end_of___lbmod:
  2011                           	opt stack 0
  2012                           tosu	equ	0xFFF
  2013                           tosh	equ	0xFFE
  2014                           tosl	equ	0xFFD
  2015                           pclath	equ	0xFFA
  2016                           tblptru	equ	0xFF8
  2017                           tblptrh	equ	0xFF7
  2018                           tblptrl	equ	0xFF6
  2019                           tablat	equ	0xFF5
  2020                           prodh	equ	0xFF4
  2021                           prodl	equ	0xFF3
  2022                           intcon	equ	0xFF2
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           indf1	equ	0xFE7
  2026                           postinc1	equ	0xFE6
  2027                           fsr1h	equ	0xFE2
  2028                           fsr1l	equ	0xFE1
  2029                           indf2	equ	0xFDF
  2030                           postinc2	equ	0xFDE
  2031                           postdec2	equ	0xFDD
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _ES_CheckUserEvents *****************
  2037 ;; Defined at:
  2038 ;;		line 46 in file "ES_CheckEvents.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  i               1   16[COMRAM] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      unsigned char 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2052 ;;      Params:         0       0       0       0
  2053 ;;      Locals:         1       0       0       0
  2054 ;;      Temps:          0       0       0       0
  2055 ;;      Totals:         1       0       0       0
  2056 ;;Total ram usage:        1 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    2
  2059 ;; This function calls:
  2060 ;;		_Check4Keystroke
  2061 ;; This function is called by:
  2062 ;;		_ES_Run
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text11
  2067  000B14                     __ptext11:
  2068                           	opt stack 0
  2069  000B14                     _ES_CheckUserEvents:
  2070                           	opt stack 27
  2071                           
  2072                           ;ES_CheckEvents.c: 48: uint8_t i;
  2073                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2074                           
  2075                           ;incstack = 0
  2076  000B14  0E00               	movlw	0
  2077  000B16  6E11               	movwf	ES_CheckUserEvents@i,c
  2078  000B18  5011               	movf	ES_CheckUserEvents@i,w,c
  2079  000B1A  A4D8               	btfss	status,2,c
  2080  000B1C  0012               	return	
  2081                           
  2082                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2083  000B1E  5011               	movf	ES_CheckUserEvents@i,w,c
  2084  000B20  0D02               	mullw	2
  2085  000B22  0E57               	movlw	low _ES_EventList
  2086  000B24  24F3               	addwf	prodl,w,c
  2087  000B26  6EF6               	movwf	tblptrl,c
  2088  000B28  0E03               	movlw	high _ES_EventList
  2089  000B2A  20F4               	addwfc	prodh,w,c
  2090  000B2C  6EF7               	movwf	tblptrh,c
  2091  000B2E                     	if	0	;There are less than 3 active tblptr bytes
  2092  000B2E                     	endif
  2093  000B2E  D801               	call	u1488
  2094  000B30  D00C               	goto	u1489
  2095  000B32                     u1488:
  2096  000B32  0005               	push	
  2097  000B34  6EFA               	movwf	pclath,c
  2098  000B36  0009               	tblrd		*+
  2099  000B38  50F5               	movf	tablat,w,c
  2100  000B3A  6EFD               	movwf	tosl,c
  2101  000B3C  0009               	tblrd		*+
  2102  000B3E  50F5               	movf	tablat,w,c
  2103  000B40  6EFE               	movwf	tosh,c
  2104  000B42  50F8               	movf	tblptru,w,c
  2105  000B44  6EFF               	movwf	tosu,c
  2106  000B46  50FA               	movf	pclath,w,c
  2107  000B48  0012               	return		;indir
  2108  000B4A                     u1489:
  2109  000B4A  06E8               	decf	wreg,f,c
  2110  000B4C  B4D8               	btfsc	status,2,c
  2111  000B4E  0012               	return	
  2112                           
  2113                           ;ES_CheckEvents.c: 52: break;
  2114  000B50  2A11               	incf	ES_CheckUserEvents@i,f,c
  2115  000B52  D7E2               	goto	L1
  2116  000B54                     __end_of_ES_CheckUserEvents:
  2117                           	opt stack 0
  2118                           tosu	equ	0xFFF
  2119                           tosh	equ	0xFFE
  2120                           tosl	equ	0xFFD
  2121                           pclath	equ	0xFFA
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           intcon	equ	0xFF2
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           indf1	equ	0xFE7
  2132                           postinc1	equ	0xFE6
  2133                           fsr1h	equ	0xFE2
  2134                           fsr1l	equ	0xFE1
  2135                           indf2	equ	0xFDF
  2136                           postinc2	equ	0xFDE
  2137                           postdec2	equ	0xFDD
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _Check4Keystroke *****************
  2143 ;; Defined at:
  2144 ;;		line 108 in file "EventCheckers.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      unsigned char 
  2151 ;; Registers used:
  2152 ;;		wreg
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2158 ;;      Params:         0       0       0       0
  2159 ;;      Locals:         0       0       0       0
  2160 ;;      Temps:          0       0       0       0
  2161 ;;      Totals:         0       0       0       0
  2162 ;;Total ram usage:        0 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    1
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		_ES_CheckUserEvents
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text12
  2173  000CEC                     __ptext12:
  2174                           	opt stack 0
  2175  000CEC                     _Check4Keystroke:
  2176                           	opt stack 27
  2177                           
  2178                           ;EventCheckers.c: 124: return 0;
  2179                           
  2180                           ;incstack = 0
  2181  000CEC  0E00               	movlw	0
  2182  000CEE  0012               	return	
  2183  000CF0                     __end_of_Check4Keystroke:
  2184                           	opt stack 0
  2185                           tosu	equ	0xFFF
  2186                           tosh	equ	0xFFE
  2187                           tosl	equ	0xFFD
  2188                           pclath	equ	0xFFA
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           prodh	equ	0xFF4
  2194                           prodl	equ	0xFF3
  2195                           intcon	equ	0xFF2
  2196                           postinc0	equ	0xFEE
  2197                           wreg	equ	0xFE8
  2198                           indf1	equ	0xFE7
  2199                           postinc1	equ	0xFE6
  2200                           fsr1h	equ	0xFE2
  2201                           fsr1l	equ	0xFE1
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _ES_Initialize *****************
  2210 ;; Defined at:
  2211 ;;		line 242 in file "ES_Framework.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  NewRate         2    0[BANK0 ] enum E15428
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  i               1   49[COMRAM] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      enum E15499
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2225 ;;      Params:         0       2       0       0
  2226 ;;      Locals:         1       0       0       0
  2227 ;;      Temps:          0       0       0       0
  2228 ;;      Totals:         1       2       0       0
  2229 ;;Total ram usage:        3 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    5
  2232 ;; This function calls:
  2233 ;;		_ES_InitQueue
  2234 ;;		_ES_Timer_Init
  2235 ;;		_InitToggleService
  2236 ;; This function is called by:
  2237 ;;		_main
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text13
  2242  00068C                     __ptext13:
  2243                           	opt stack 0
  2244  00068C                     _ES_Initialize:
  2245                           	opt stack 25
  2246                           
  2247                           ;ES_Framework.c: 243: uint8_t i;
  2248                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2249                           
  2250                           ;incstack = 0
  2251  00068C  C092  F013         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2252  000690  C093  F014         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2253  000694  EC6F  F006         	call	_ES_Timer_Init	;wreg free
  2254                           
  2255                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2256  000698  0E00               	movlw	0
  2257  00069A  6E32               	movwf	ES_Initialize@i,c
  2258  00069C                     l2298:
  2259  00069C  5032               	movf	ES_Initialize@i,w,c
  2260  00069E  A4D8               	btfss	status,2,c
  2261  0006A0  D05F               	goto	l2322
  2262                           
  2263                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2264                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2265  0006A2  5032               	movf	ES_Initialize@i,w,c
  2266  0006A4  0D04               	mullw	4
  2267  0006A6  0E50               	movlw	low _ServDescList
  2268  0006A8  24F3               	addwf	prodl,w,c
  2269  0006AA  6EF6               	movwf	tblptrl,c
  2270  0006AC  0E03               	movlw	high _ServDescList
  2271  0006AE  20F4               	addwfc	prodh,w,c
  2272  0006B0  6EF7               	movwf	tblptrh,c
  2273  0006B2                     	if	0	;There are less than 3 active tblptr bytes
  2274  0006B2                     	endif
  2275  0006B2  0009               	tblrd		*+
  2276  0006B4  50F5               	movf	tablat,w,c
  2277  0006B6  0009               	tblrd		*+
  2278  0006B8  10F5               	iorwf	tablat,w,c
  2279  0006BA  B4D8               	btfsc	status,2,c
  2280  0006BC  D012               	goto	l2306
  2281  0006BE  5032               	movf	ES_Initialize@i,w,c
  2282  0006C0  0D04               	mullw	4
  2283  0006C2  0E02               	movlw	2
  2284  0006C4  26F3               	addwf	prodl,f,c
  2285  0006C6  0E00               	movlw	0
  2286  0006C8  22F4               	addwfc	prodh,f,c
  2287  0006CA  0E50               	movlw	low _ServDescList
  2288  0006CC  24F3               	addwf	prodl,w,c
  2289  0006CE  6EF6               	movwf	tblptrl,c
  2290  0006D0  0E03               	movlw	high _ServDescList
  2291  0006D2  20F4               	addwfc	prodh,w,c
  2292  0006D4  6EF7               	movwf	tblptrh,c
  2293  0006D6                     	if	0	;There are less than 3 active tblptr bytes
  2294  0006D6                     	endif
  2295  0006D6  0009               	tblrd		*+
  2296  0006D8  50F5               	movf	tablat,w,c
  2297  0006DA  0009               	tblrd		*+
  2298  0006DC  10F5               	iorwf	tablat,w,c
  2299  0006DE  A4D8               	btfss	status,2,c
  2300  0006E0  D002               	goto	l2310
  2301  0006E2                     l2306:
  2302                           
  2303                           ;ES_Framework.c: 249: return FailedPointer;
  2304  0006E2  0E03               	movlw	3
  2305  0006E4  0012               	return	
  2306  0006E6                     l2310:
  2307                           
  2308                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2309  0006E6  5032               	movf	ES_Initialize@i,w,c
  2310  0006E8  0D03               	mullw	3
  2311  0006EA  0E54               	movlw	low _EventQueues
  2312  0006EC  24F3               	addwf	prodl,w,c
  2313  0006EE  6EF6               	movwf	tblptrl,c
  2314  0006F0  0E03               	movlw	high _EventQueues
  2315  0006F2  20F4               	addwfc	prodh,w,c
  2316  0006F4  6EF7               	movwf	tblptrh,c
  2317  0006F6                     	if	0	;There are less than 3 active tblptr bytes
  2318  0006F6                     	endif
  2319  0006F6  0009               	tblrd		*+
  2320  0006F8  CFF5 F011          	movff	tablat,ES_InitQueue@pBlock
  2321  0006FC  000A               	tblrd		*-
  2322  0006FE  CFF5 F012          	movff	tablat,ES_InitQueue@pBlock+1
  2323  000702  5032               	movf	ES_Initialize@i,w,c
  2324  000704  0D03               	mullw	3
  2325  000706  0E02               	movlw	2
  2326  000708  26F3               	addwf	prodl,f,c
  2327  00070A  0E00               	movlw	0
  2328  00070C  22F4               	addwfc	prodh,f,c
  2329  00070E  0E54               	movlw	low _EventQueues
  2330  000710  24F3               	addwf	prodl,w,c
  2331  000712  6EF6               	movwf	tblptrl,c
  2332  000714  0E03               	movlw	high _EventQueues
  2333  000716  20F4               	addwfc	prodh,w,c
  2334  000718  6EF7               	movwf	tblptrh,c
  2335  00071A                     	if	0	;There are less than 3 active tblptr bytes
  2336  00071A                     	endif
  2337  00071A  0008               	tblrd		*
  2338  00071C  CFF5 F013          	movff	tablat,ES_InitQueue@BlockSize
  2339  000720  ECE3  F005         	call	_ES_InitQueue	;wreg free
  2340                           
  2341                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2342  000724  5032               	movf	ES_Initialize@i,w,c
  2343  000726  0D04               	mullw	4
  2344  000728  0E50               	movlw	low _ServDescList
  2345  00072A  24F3               	addwf	prodl,w,c
  2346  00072C  6EF6               	movwf	tblptrl,c
  2347  00072E  0E03               	movlw	high _ServDescList
  2348  000730  20F4               	addwfc	prodh,w,c
  2349  000732  6EF7               	movwf	tblptrh,c
  2350  000734                     	if	0	;There are less than 3 active tblptr bytes
  2351  000734                     	endif
  2352  000734  D801               	call	u1618
  2353  000736  D00D               	goto	u1619
  2354  000738                     u1618:
  2355  000738  0005               	push	
  2356  00073A  6EFA               	movwf	pclath,c
  2357  00073C  0009               	tblrd		*+
  2358  00073E  50F5               	movf	tablat,w,c
  2359  000740  6EFD               	movwf	tosl,c
  2360  000742  0009               	tblrd		*+
  2361  000744  50F5               	movf	tablat,w,c
  2362  000746  6EFE               	movwf	tosh,c
  2363  000748  50F8               	movf	tblptru,w,c
  2364  00074A  6EFF               	movwf	tosu,c
  2365  00074C  50FA               	movf	pclath,w,c
  2366  00074E  5032               	movf	ES_Initialize@i,w,c
  2367  000750  0012               	return		;indir
  2368  000752                     u1619:
  2369  000752  06E8               	decf	wreg,f,c
  2370  000754  B4D8               	btfsc	status,2,c
  2371  000756  D002               	goto	l2318
  2372                           
  2373                           ;ES_Framework.c: 254: return FailedInit;
  2374  000758  0E05               	movlw	5
  2375  00075A  0012               	return	
  2376  00075C                     l2318:
  2377  00075C  2A32               	incf	ES_Initialize@i,f,c
  2378  00075E  D79E               	goto	l2298
  2379  000760                     l2322:
  2380                           
  2381                           ;ES_Framework.c: 255: }
  2382                           ;ES_Framework.c: 256: return Success;
  2383  000760  0E00               	movlw	0
  2384  000762  0012               	return	
  2385  000764                     __end_of_ES_Initialize:
  2386                           	opt stack 0
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           postinc0	equ	0xFEE
  2399                           wreg	equ	0xFE8
  2400                           indf1	equ	0xFE7
  2401                           postinc1	equ	0xFE6
  2402                           fsr1h	equ	0xFE2
  2403                           fsr1l	equ	0xFE1
  2404                           indf2	equ	0xFDF
  2405                           postinc2	equ	0xFDE
  2406                           postdec2	equ	0xFDD
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _InitToggleService *****************
  2412 ;; Defined at:
  2413 ;;		line 63 in file "ToggleService.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  Priority        1    wreg     unsigned char 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;  Priority        1   48[COMRAM] unsigned char 
  2418 ;;  ThisEvent       3   45[COMRAM] struct ES_Event_t
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      unsigned char 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2428 ;;      Params:         0       0       0       0
  2429 ;;      Locals:         4       0       0       0
  2430 ;;      Temps:          0       0       0       0
  2431 ;;      Totals:         4       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    4
  2435 ;; This function calls:
  2436 ;;		_ES_PostToService
  2437 ;;		_ES_Timer_InitTimer
  2438 ;; This function is called by:
  2439 ;;		_ES_Initialize
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text14
  2444  000B8E                     __ptext14:
  2445                           	opt stack 0
  2446  000B8E                     _InitToggleService:
  2447                           	opt stack 25
  2448                           
  2449                           ;incstack = 0
  2450                           ;InitToggleService@Priority stored from wreg
  2451  000B8E  6E31               	movwf	InitToggleService@Priority,c
  2452                           
  2453                           ;ToggleService.c: 65: ES_Event ThisEvent;
  2454                           ;ToggleService.c: 67: MyPriority = Priority;
  2455  000B90  C031  F046         	movff	InitToggleService@Priority,ToggleService@MyPriority
  2456                           
  2457                           ;ToggleService.c: 73: ES_Timer_InitTimer(0,50);
  2458  000B94  0E00               	movlw	0
  2459  000B96  6E12               	movwf	ES_Timer_InitTimer@NewTime+1,c
  2460  000B98  0E32               	movlw	50
  2461  000B9A  6E11               	movwf	ES_Timer_InitTimer@NewTime,c
  2462  000B9C  0E00               	movlw	0
  2463  000B9E  EC22  F005         	call	_ES_Timer_InitTimer
  2464                           
  2465                           ;ToggleService.c: 76: ThisEvent.EventType = ES_INIT;
  2466  000BA2  0E02               	movlw	2
  2467  000BA4  6E2E               	movwf	InitToggleService@ThisEvent,c
  2468                           
  2469                           ;ToggleService.c: 77: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2470  000BA6  C02E  F028         	movff	InitToggleService@ThisEvent,ES_PostToService@TheEvent
  2471  000BAA  C02F  F029         	movff	InitToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  2472  000BAE  C030  F02A         	movff	InitToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  2473  000BB2  5046               	movf	ToggleService@MyPriority,w,c
  2474  000BB4  EC57  F005         	call	_ES_PostToService
  2475  000BB8  06E8               	decf	wreg,f,c
  2476  000BBA  A4D8               	btfss	status,2,c
  2477  000BBC  D002               	goto	l2274
  2478                           
  2479                           ;ToggleService.c: 78: {
  2480                           ;ToggleService.c: 79: return 1;
  2481  000BBE  0E01               	movlw	1
  2482                           
  2483                           ;ToggleService.c: 80: }else
  2484  000BC0  0012               	return	
  2485  000BC2                     l2274:
  2486                           
  2487                           ;ToggleService.c: 81: {
  2488                           ;ToggleService.c: 82: return 0;
  2489  000BC2  0E00               	movlw	0
  2490  000BC4  0012               	return	
  2491  000BC6                     __end_of_InitToggleService:
  2492                           	opt stack 0
  2493                           tosu	equ	0xFFF
  2494                           tosh	equ	0xFFE
  2495                           tosl	equ	0xFFD
  2496                           pclath	equ	0xFFA
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           intcon	equ	0xFF2
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           indf1	equ	0xFE7
  2507                           postinc1	equ	0xFE6
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _ES_Timer_InitTimer *****************
  2518 ;; Defined at:
  2519 ;;		line 229 in file "ES_Timers.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  Num             1    wreg     unsigned char 
  2522 ;;  NewTime         2   16[COMRAM] unsigned int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  Num             1   20[COMRAM] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      enum E15477
  2527 ;; Registers used:
  2528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2534 ;;      Params:         2       0       0       0
  2535 ;;      Locals:         1       0       0       0
  2536 ;;      Temps:          2       0       0       0
  2537 ;;      Totals:         5       0       0       0
  2538 ;;Total ram usage:        5 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_InitToggleService
  2545 ;;		_RunToggleService
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text15
  2550  000A44                     __ptext15:
  2551                           	opt stack 0
  2552  000A44                     _ES_Timer_InitTimer:
  2553                           	opt stack 27
  2554                           
  2555                           ;incstack = 0
  2556                           ;ES_Timer_InitTimer@Num stored from wreg
  2557  000A44  6E15               	movwf	ES_Timer_InitTimer@Num,c
  2558                           
  2559                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  2560                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  2561                           ;ES_Timers.c: 236: (NewTime == 0) )
  2562  000A46  0E10               	movlw	16
  2563  000A48  6015               	cpfslt	ES_Timer_InitTimer@Num,c
  2564  000A4A  0012               	return	
  2565  000A4C  5015               	movf	ES_Timer_InitTimer@Num,w,c
  2566  000A4E  0D02               	mullw	2
  2567  000A50  0E21               	movlw	low _Timer2PostFunc
  2568  000A52  24F3               	addwf	prodl,w,c
  2569  000A54  6EF6               	movwf	tblptrl,c
  2570  000A56  0E03               	movlw	high _Timer2PostFunc
  2571  000A58  20F4               	addwfc	prodh,w,c
  2572  000A5A  6EF7               	movwf	tblptrh,c
  2573  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  2574  000A5C                     	endif
  2575  000A5C  0009               	tblrd		*+
  2576  000A5E  50F5               	movf	tablat,w,c
  2577  000A60  0009               	tblrd		*+
  2578  000A62  10F5               	iorwf	tablat,w,c
  2579  000A64  B4D8               	btfsc	status,2,c
  2580  000A66  0012               	return	
  2581  000A68  5011               	movf	ES_Timer_InitTimer@NewTime,w,c
  2582  000A6A  1012               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  2583  000A6C  B4D8               	btfsc	status,2,c
  2584  000A6E  0012               	return	
  2585                           
  2586                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  2587                           
  2588                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  2589                           ;	Return value of _ES_Timer_InitTimer is never used
  2590  000A70  5015               	movf	ES_Timer_InitTimer@Num,w,c
  2591  000A72  0D02               	mullw	2
  2592  000A74  0E60               	movlw	low _TMR_TimerArray
  2593  000A76  24F3               	addwf	prodl,w,c
  2594  000A78  6ED9               	movwf	fsr2l,c
  2595  000A7A  0E00               	movlw	high _TMR_TimerArray
  2596  000A7C  20F4               	addwfc	prodh,w,c
  2597  000A7E  6EDA               	movwf	fsr2h,c
  2598  000A80  C011  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  2599  000A84  C012  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  2600                           
  2601                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  2602  000A88  5015               	movf	ES_Timer_InitTimer@Num,w,c
  2603  000A8A  0D02               	mullw	2
  2604  000A8C  0E01               	movlw	low _BitNum2SetMask
  2605  000A8E  24F3               	addwf	prodl,w,c
  2606  000A90  6EF6               	movwf	tblptrl,c
  2607  000A92  0E03               	movlw	high _BitNum2SetMask
  2608  000A94  20F4               	addwfc	prodh,w,c
  2609  000A96  6EF7               	movwf	tblptrh,c
  2610  000A98                     	if	0	;There are less than 3 active tblptr bytes
  2611  000A98                     	endif
  2612  000A98  0009               	tblrd		*+
  2613  000A9A  CFF5 F013          	movff	tablat,??_ES_Timer_InitTimer
  2614  000A9E  0009               	tblrd		*+
  2615  000AA0  CFF5 F014          	movff	tablat,??_ES_Timer_InitTimer+1
  2616  000AA4  5013               	movf	??_ES_Timer_InitTimer,w,c
  2617  000AA6  1240               	iorwf	_TMR_ActiveFlags,f,c
  2618  000AA8  5014               	movf	??_ES_Timer_InitTimer+1,w,c
  2619  000AAA  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  2620  000AAC  0012               	return	
  2621  000AAE                     __end_of_ES_Timer_InitTimer:
  2622                           	opt stack 0
  2623                           tosu	equ	0xFFF
  2624                           tosh	equ	0xFFE
  2625                           tosl	equ	0xFFD
  2626                           pclath	equ	0xFFA
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           indf1	equ	0xFE7
  2637                           postinc1	equ	0xFE6
  2638                           fsr1h	equ	0xFE2
  2639                           fsr1l	equ	0xFE1
  2640                           indf2	equ	0xFDF
  2641                           postinc2	equ	0xFDE
  2642                           postdec2	equ	0xFDD
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _ES_PostToService *****************
  2648 ;; Defined at:
  2649 ;;		line 352 in file "ES_Framework.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  WhichService    1    wreg     unsigned char 
  2652 ;;  TheEvent        3   39[COMRAM] struct ES_Event_t
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  WhichService    1   44[COMRAM] unsigned char 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      unsigned char 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2664 ;;      Params:         3       0       0       0
  2665 ;;      Locals:         1       0       0       0
  2666 ;;      Temps:          2       0       0       0
  2667 ;;      Totals:         6       0       0       0
  2668 ;;Total ram usage:        6 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    3
  2671 ;; This function calls:
  2672 ;;		_ES_EnQueueFIFO
  2673 ;; This function is called by:
  2674 ;;		_InitToggleService
  2675 ;;		_PostToggleService
  2676 ;;		_InitTemplateFSM
  2677 ;;		_PostTemplateFSM
  2678 ;;		_InitTemplateService
  2679 ;;		_PostTemplateService
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text16
  2684  000AAE                     __ptext16:
  2685                           	opt stack 0
  2686  000AAE                     _ES_PostToService:
  2687                           	opt stack 23
  2688                           
  2689                           ;incstack = 0
  2690                           ;ES_PostToService@WhichService stored from wreg
  2691  000AAE  6E2D               	movwf	ES_PostToService@WhichService,c
  2692                           
  2693                           ;ES_Framework.c: 353: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  2694                           ;ES_Framework.c: 354: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  2695                           ;ES_Framework.c: 355: 1 )){
  2696  000AB0  502D               	movf	ES_PostToService@WhichService,w,c
  2697  000AB2  A4D8               	btfss	status,2,c
  2698  000AB4  D02D               	goto	l2108
  2699  000AB6  502D               	movf	ES_PostToService@WhichService,w,c
  2700  000AB8  0D03               	mullw	3
  2701  000ABA  0E54               	movlw	low _EventQueues
  2702  000ABC  24F3               	addwf	prodl,w,c
  2703  000ABE  6EF6               	movwf	tblptrl,c
  2704  000AC0  0E03               	movlw	high _EventQueues
  2705  000AC2  20F4               	addwfc	prodh,w,c
  2706  000AC4  6EF7               	movwf	tblptrh,c
  2707  000AC6                     	if	0	;There are less than 3 active tblptr bytes
  2708  000AC6                     	endif
  2709  000AC6  0009               	tblrd		*+
  2710  000AC8  CFF5 F01D          	movff	tablat,ES_EnQueueFIFO@pBlock
  2711  000ACC  000A               	tblrd		*-
  2712  000ACE  CFF5 F01E          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  2713  000AD2  C028  F01F         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  2714  000AD6  C029  F020         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  2715  000ADA  C02A  F021         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  2716  000ADE  ECB2  F003         	call	_ES_EnQueueFIFO	;wreg free
  2717  000AE2  06E8               	decf	wreg,f,c
  2718  000AE4  A4D8               	btfss	status,2,c
  2719  000AE6  D014               	goto	l2108
  2720                           
  2721                           ;ES_Framework.c: 356: Ready |= BitNum2SetMask[WhichService];
  2722  000AE8  502D               	movf	ES_PostToService@WhichService,w,c
  2723  000AEA  0D02               	mullw	2
  2724  000AEC  0E01               	movlw	low _BitNum2SetMask
  2725  000AEE  24F3               	addwf	prodl,w,c
  2726  000AF0  6EF6               	movwf	tblptrl,c
  2727  000AF2  0E03               	movlw	high _BitNum2SetMask
  2728  000AF4  20F4               	addwfc	prodh,w,c
  2729  000AF6  6EF7               	movwf	tblptrh,c
  2730  000AF8                     	if	0	;There are less than 3 active tblptr bytes
  2731  000AF8                     	endif
  2732  000AF8  0009               	tblrd		*+
  2733  000AFA  CFF5 F02B          	movff	tablat,??_ES_PostToService
  2734  000AFE  0009               	tblrd		*+
  2735  000B00  CFF5 F02C          	movff	tablat,??_ES_PostToService+1
  2736  000B04  502B               	movf	??_ES_PostToService,w,c
  2737  000B06  123C               	iorwf	_Ready,f,c
  2738  000B08  502C               	movf	??_ES_PostToService+1,w,c
  2739  000B0A  123D               	iorwf	_Ready+1,f,c
  2740                           
  2741                           ;ES_Framework.c: 357: return 1;
  2742  000B0C  0E01               	movlw	1
  2743                           
  2744                           ;ES_Framework.c: 358: } else
  2745  000B0E  0012               	return	
  2746  000B10                     l2108:
  2747                           
  2748                           ;ES_Framework.c: 359: return 0;
  2749  000B10  0E00               	movlw	0
  2750  000B12  0012               	return	
  2751  000B14                     __end_of_ES_PostToService:
  2752                           	opt stack 0
  2753                           tosu	equ	0xFFF
  2754                           tosh	equ	0xFFE
  2755                           tosl	equ	0xFFD
  2756                           pclath	equ	0xFFA
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           prodh	equ	0xFF4
  2762                           prodl	equ	0xFF3
  2763                           intcon	equ	0xFF2
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           indf1	equ	0xFE7
  2767                           postinc1	equ	0xFE6
  2768                           fsr1h	equ	0xFE2
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _ES_EnQueueFIFO *****************
  2778 ;; Defined at:
  2779 ;;		line 85 in file "ES_Queue.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  pBlock          2   28[COMRAM] PTR struct ES_Event_t
  2782 ;;		 -> Queue0(18), 
  2783 ;;  Event2Add       3   30[COMRAM] struct ES_Event_t
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  pThisQueue      2   37[COMRAM] PTR struct .
  2786 ;;		 -> Queue0(18), 
  2787 ;;  SaveCrit        1   36[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      unsigned char 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2797 ;;      Params:         5       0       0       0
  2798 ;;      Locals:         3       0       0       0
  2799 ;;      Temps:          3       0       0       0
  2800 ;;      Totals:        11       0       0       0
  2801 ;;Total ram usage:       11 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    2
  2804 ;; This function calls:
  2805 ;;		___awmod
  2806 ;;		___wmul
  2807 ;; This function is called by:
  2808 ;;		_ES_PostToService
  2809 ;;		_ES_PostAll
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text17
  2814  000764                     __ptext17:
  2815                           	opt stack 0
  2816  000764                     _ES_EnQueueFIFO:
  2817                           	opt stack 23
  2818                           
  2819                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  2820                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  2821                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  2822                           
  2823                           ;incstack = 0
  2824  000764  C01D  F026         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  2825  000768  C01E  F027         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  2826                           
  2827                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  2828  00076C  C026  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  2829  000770  C027  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  2830  000774  EE10 F002          	lfsr	1,2
  2831  000778  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  2832  00077A  26E1               	addwf	fsr1l,f,c
  2833  00077C  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  2834  00077E  22E2               	addwfc	fsr1h,f,c
  2835  000780  50DE               	movf	postinc2,w,c
  2836  000782  5CE6               	subwf	postinc1,w,c
  2837  000784  B0D8               	btfsc	status,0,c
  2838  000786  D046               	goto	l2092
  2839                           
  2840                           ;ES_Queue.c: 92: {
  2841                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2842  000788  CFF2 F025          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  2843  00078C  9EF2               	bcf	intcon,7,c	;volatile
  2844                           
  2845                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  2846                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  2847  00078E  C026  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  2848  000792  C027  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  2849  000796  50DF               	movf	indf2,w,c
  2850  000798  6E22               	movwf	??_ES_EnQueueFIFO& (0+255),c
  2851  00079A  5022               	movf	??_ES_EnQueueFIFO,w,c
  2852  00079C  6E13               	movwf	___awmod@divisor,c
  2853  00079E  6A14               	clrf	___awmod@divisor+1,c
  2854  0007A0  EE20 F002          	lfsr	2,2
  2855  0007A4  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  2856  0007A6  26D9               	addwf	fsr2l,f,c
  2857  0007A8  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  2858  0007AA  22DA               	addwfc	fsr2h,f,c
  2859  0007AC  50DF               	movf	indf2,w,c
  2860  0007AE  6E23               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  2861  0007B0  EE20 F001          	lfsr	2,1
  2862  0007B4  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  2863  0007B6  26D9               	addwf	fsr2l,f,c
  2864  0007B8  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  2865  0007BA  22DA               	addwfc	fsr2h,f,c
  2866  0007BC  50DF               	movf	indf2,w,c
  2867  0007BE  6E24               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  2868  0007C0  5024               	movf	??_ES_EnQueueFIFO+2,w,c
  2869  0007C2  2423               	addwf	??_ES_EnQueueFIFO+1,w,c
  2870  0007C4  6E11               	movwf	___awmod@dividend,c
  2871  0007C6  6A12               	clrf	___awmod@dividend+1,c
  2872  0007C8  3612               	rlcf	___awmod@dividend+1,f,c
  2873  0007CA  ECEA  F004         	call	___awmod	;wreg free
  2874  0007CE  0E01               	movlw	1
  2875  0007D0  2411               	addwf	?___awmod,w,c
  2876  0007D2  6E17               	movwf	___wmul@multiplier,c
  2877  0007D4  0E00               	movlw	0
  2878  0007D6  2012               	addwfc	?___awmod+1,w,c
  2879  0007D8  6E18               	movwf	___wmul@multiplier+1,c
  2880  0007DA  0E00               	movlw	0
  2881  0007DC  6E1A               	movwf	___wmul@multiplicand+1,c
  2882  0007DE  0E03               	movlw	3
  2883  0007E0  6E19               	movwf	___wmul@multiplicand,c
  2884  0007E2  EC3B  F006         	call	___wmul	;wreg free
  2885  0007E6  5017               	movf	?___wmul,w,c
  2886  0007E8  241D               	addwf	ES_EnQueueFIFO@pBlock,w,c
  2887  0007EA  6ED9               	movwf	fsr2l,c
  2888  0007EC  5018               	movf	?___wmul+1,w,c
  2889  0007EE  201E               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  2890  0007F0  6EDA               	movwf	fsr2h,c
  2891  0007F2  C01F  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  2892  0007F6  C020  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  2893  0007FA  C021  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  2894                           
  2895                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  2896  0007FE  EE20 F002          	lfsr	2,2
  2897  000802  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  2898  000804  26D9               	addwf	fsr2l,f,c
  2899  000806  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  2900  000808  22DA               	addwfc	fsr2h,f,c
  2901  00080A  2ADF               	incf	indf2,f,c
  2902                           
  2903                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  2904  00080C  C025  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  2905                           
  2906                           ;ES_Queue.c: 101: return(1);
  2907  000810  0E01               	movlw	1
  2908                           
  2909                           ;ES_Queue.c: 102: }else
  2910  000812  0012               	return	
  2911  000814                     l2092:
  2912                           
  2913                           ;ES_Queue.c: 103: return(0);
  2914  000814  0E00               	movlw	0
  2915  000816  0012               	return	
  2916  000818                     __end_of_ES_EnQueueFIFO:
  2917                           	opt stack 0
  2918                           tosu	equ	0xFFF
  2919                           tosh	equ	0xFFE
  2920                           tosl	equ	0xFFD
  2921                           pclath	equ	0xFFA
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           intcon	equ	0xFF2
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           indf1	equ	0xFE7
  2932                           postinc1	equ	0xFE6
  2933                           fsr1h	equ	0xFE2
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942 ;; *************** function ___wmul *****************
  2943 ;; Defined at:
  2944 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  multiplier      2   22[COMRAM] unsigned int 
  2947 ;;  multiplicand    2   24[COMRAM] unsigned int 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  product         2   26[COMRAM] unsigned int 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2   22[COMRAM] unsigned int 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0, prodl, prodh
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2959 ;;      Params:         4       0       0       0
  2960 ;;      Locals:         2       0       0       0
  2961 ;;      Temps:          0       0       0       0
  2962 ;;      Totals:         6       0       0       0
  2963 ;;Total ram usage:        6 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    1
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_ES_EnQueueFIFO
  2970 ;;		_ES_DeQueue
  2971 ;;		_ES_EnQueueLIFO
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text18
  2976  000C76                     __ptext18:
  2977                           	opt stack 0
  2978  000C76                     ___wmul:
  2979                           	opt stack 23
  2980                           
  2981                           ;incstack = 0
  2982  000C76  5017               	movf	___wmul@multiplier,w,c
  2983  000C78  0219               	mulwf	___wmul@multiplicand,c
  2984  000C7A  CFF3 F01B          	movff	prodl,___wmul@product
  2985  000C7E  CFF4 F01C          	movff	prodh,___wmul@product+1
  2986  000C82  5017               	movf	___wmul@multiplier,w,c
  2987  000C84  021A               	mulwf	___wmul@multiplicand+1,c
  2988  000C86  50F3               	movf	prodl,w,c
  2989  000C88  261C               	addwf	___wmul@product+1,f,c
  2990  000C8A  5018               	movf	___wmul@multiplier+1,w,c
  2991  000C8C  0219               	mulwf	___wmul@multiplicand,c
  2992  000C8E  50F3               	movf	prodl,w,c
  2993  000C90  261C               	addwf	___wmul@product+1,f,c
  2994  000C92  C01B  F017         	movff	___wmul@product,?___wmul
  2995  000C96  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  2996  000C9A  0012               	return	
  2997  000C9C                     __end_of___wmul:
  2998                           	opt stack 0
  2999                           tosu	equ	0xFFF
  3000                           tosh	equ	0xFFE
  3001                           tosl	equ	0xFFD
  3002                           pclath	equ	0xFFA
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           intcon	equ	0xFF2
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           indf1	equ	0xFE7
  3013                           postinc1	equ	0xFE6
  3014                           fsr1h	equ	0xFE2
  3015                           fsr1l	equ	0xFE1
  3016                           indf2	equ	0xFDF
  3017                           postinc2	equ	0xFDE
  3018                           postdec2	equ	0xFDD
  3019                           fsr2h	equ	0xFDA
  3020                           fsr2l	equ	0xFD9
  3021                           status	equ	0xFD8
  3022                           
  3023 ;; *************** function ___awmod *****************
  3024 ;; Defined at:
  3025 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  dividend        2   16[COMRAM] int 
  3028 ;;  divisor         2   18[COMRAM] int 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  sign            1   21[COMRAM] unsigned char 
  3031 ;;  counter         1   20[COMRAM] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  2   16[COMRAM] int 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3041 ;;      Params:         4       0       0       0
  3042 ;;      Locals:         2       0       0       0
  3043 ;;      Temps:          0       0       0       0
  3044 ;;      Totals:         6       0       0       0
  3045 ;;Total ram usage:        6 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_ES_EnQueueFIFO
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text19
  3056  0009D4                     __ptext19:
  3057                           	opt stack 0
  3058  0009D4                     ___awmod:
  3059                           	opt stack 23
  3060                           
  3061                           ;incstack = 0
  3062  0009D4  0E00               	movlw	0
  3063  0009D6  6E16               	movwf	___awmod@sign,c
  3064  0009D8  AE12               	btfss	___awmod@dividend+1,7,c
  3065  0009DA  D006               	goto	l2048
  3066  0009DC  6C11               	negf	___awmod@dividend,c
  3067  0009DE  1E12               	comf	___awmod@dividend+1,f,c
  3068  0009E0  B0D8               	btfsc	status,0,c
  3069  0009E2  2A12               	incf	___awmod@dividend+1,f,c
  3070  0009E4  0E01               	movlw	1
  3071  0009E6  6E16               	movwf	___awmod@sign,c
  3072  0009E8                     l2048:
  3073  0009E8  AE14               	btfss	___awmod@divisor+1,7,c
  3074  0009EA  D004               	goto	l2052
  3075  0009EC  6C13               	negf	___awmod@divisor,c
  3076  0009EE  1E14               	comf	___awmod@divisor+1,f,c
  3077  0009F0  B0D8               	btfsc	status,0,c
  3078  0009F2  2A14               	incf	___awmod@divisor+1,f,c
  3079  0009F4                     l2052:
  3080  0009F4  5013               	movf	___awmod@divisor,w,c
  3081  0009F6  1014               	iorwf	___awmod@divisor+1,w,c
  3082  0009F8  B4D8               	btfsc	status,2,c
  3083  0009FA  D018               	goto	l2068
  3084  0009FC  0E01               	movlw	1
  3085  0009FE  6E15               	movwf	___awmod@counter,c
  3086  000A00  D004               	goto	l2058
  3087  000A02                     l2056:
  3088  000A02  90D8               	bcf	status,0,c
  3089  000A04  3613               	rlcf	___awmod@divisor,f,c
  3090  000A06  3614               	rlcf	___awmod@divisor+1,f,c
  3091  000A08  2A15               	incf	___awmod@counter,f,c
  3092  000A0A                     l2058:
  3093  000A0A  AE14               	btfss	___awmod@divisor+1,7,c
  3094  000A0C  D7FA               	goto	l2056
  3095  000A0E                     l2060:
  3096  000A0E  5013               	movf	___awmod@divisor,w,c
  3097  000A10  5C11               	subwf	___awmod@dividend,w,c
  3098  000A12  5014               	movf	___awmod@divisor+1,w,c
  3099  000A14  5812               	subwfb	___awmod@dividend+1,w,c
  3100  000A16  A0D8               	btfss	status,0,c
  3101  000A18  D004               	goto	l2064
  3102  000A1A  5013               	movf	___awmod@divisor,w,c
  3103  000A1C  5E11               	subwf	___awmod@dividend,f,c
  3104  000A1E  5014               	movf	___awmod@divisor+1,w,c
  3105  000A20  5A12               	subwfb	___awmod@dividend+1,f,c
  3106  000A22                     l2064:
  3107  000A22  90D8               	bcf	status,0,c
  3108  000A24  3214               	rrcf	___awmod@divisor+1,f,c
  3109  000A26  3213               	rrcf	___awmod@divisor,f,c
  3110  000A28  2E15               	decfsz	___awmod@counter,f,c
  3111  000A2A  D7F1               	goto	l2060
  3112  000A2C                     l2068:
  3113  000A2C  5016               	movf	___awmod@sign,w,c
  3114  000A2E  B4D8               	btfsc	status,2,c
  3115  000A30  D004               	goto	l2072
  3116  000A32  6C11               	negf	___awmod@dividend,c
  3117  000A34  1E12               	comf	___awmod@dividend+1,f,c
  3118  000A36  B0D8               	btfsc	status,0,c
  3119  000A38  2A12               	incf	___awmod@dividend+1,f,c
  3120  000A3A                     l2072:
  3121  000A3A  C011  F011         	movff	___awmod@dividend,?___awmod
  3122  000A3E  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  3123  000A42  0012               	return	
  3124  000A44                     __end_of___awmod:
  3125                           	opt stack 0
  3126                           tosu	equ	0xFFF
  3127                           tosh	equ	0xFFE
  3128                           tosl	equ	0xFFD
  3129                           pclath	equ	0xFFA
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           indf1	equ	0xFE7
  3140                           postinc1	equ	0xFE6
  3141                           fsr1h	equ	0xFE2
  3142                           fsr1l	equ	0xFE1
  3143                           indf2	equ	0xFDF
  3144                           postinc2	equ	0xFDE
  3145                           postdec2	equ	0xFDD
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _ES_Timer_Init *****************
  3151 ;; Defined at:
  3152 ;;		line 130 in file "ES_Timers.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  Rate            2   18[COMRAM] enum E15428
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, status,2, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3166 ;;      Params:         2       0       0       0
  3167 ;;      Locals:         0       0       0       0
  3168 ;;      Temps:          0       0       0       0
  3169 ;;      Totals:         2       0       0       0
  3170 ;;Total ram usage:        2 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    2
  3173 ;; This function calls:
  3174 ;;		__HW_Timer_Init
  3175 ;; This function is called by:
  3176 ;;		_ES_Initialize
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text20
  3181  000CDE                     __ptext20:
  3182                           	opt stack 0
  3183  000CDE                     _ES_Timer_Init:
  3184                           	opt stack 27
  3185                           
  3186                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3187                           
  3188                           ;incstack = 0
  3189  000CDE  C013  F011         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3190  000CE2  C014  F012         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3191  000CE6  EC4E  F006         	call	__HW_Timer_Init	;wreg free
  3192  000CEA  0012               	return		;funcret
  3193  000CEC                     __end_of_ES_Timer_Init:
  3194                           	opt stack 0
  3195                           tosu	equ	0xFFF
  3196                           tosh	equ	0xFFE
  3197                           tosl	equ	0xFFD
  3198                           pclath	equ	0xFFA
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           intcon	equ	0xFF2
  3206                           postinc0	equ	0xFEE
  3207                           wreg	equ	0xFE8
  3208                           indf1	equ	0xFE7
  3209                           postinc1	equ	0xFE6
  3210                           fsr1h	equ	0xFE2
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function __HW_Timer_Init *****************
  3220 ;; Defined at:
  3221 ;;		line 79 in file "ES_Port.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  Rate            2   16[COMRAM] enum E15412
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3235 ;;      Params:         2       0       0       0
  3236 ;;      Locals:         0       0       0       0
  3237 ;;      Temps:          0       0       0       0
  3238 ;;      Totals:         2       0       0       0
  3239 ;;Total ram usage:        2 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    1
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_ES_Timer_Init
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text21
  3250  000C9C                     __ptext21:
  3251                           	opt stack 0
  3252  000C9C                     __HW_Timer_Init:
  3253                           	opt stack 27
  3254                           
  3255                           ;ES_Port.c: 87: PIE1 = 0b00000100;
  3256                           
  3257                           ;incstack = 0
  3258  000C9C  0E04               	movlw	4
  3259  000C9E  6E9D               	movwf	3997,c	;volatile
  3260                           
  3261                           ;ES_Port.c: 92: INTCON = 0b01000000;
  3262  000CA0  0E40               	movlw	64
  3263  000CA2  6EF2               	movwf	intcon,c	;volatile
  3264                           
  3265                           ;ES_Port.c: 98: CCP1CON = 0b00001010;
  3266  000CA4  0E0A               	movlw	10
  3267  000CA6  6EBD               	movwf	4029,c	;volatile
  3268                           
  3269                           ;ES_Port.c: 102: CCPR1L = 0b00000001;
  3270  000CA8  0E01               	movlw	1
  3271  000CAA  6EBE               	movwf	4030,c	;volatile
  3272                           
  3273                           ;ES_Port.c: 106: CCPR1H = 0b00000000;
  3274  000CAC  0E00               	movlw	0
  3275  000CAE  6EBF               	movwf	4031,c	;volatile
  3276                           
  3277                           ;ES_Port.c: 114: T1CON = 0b00100001;
  3278  000CB0  0E21               	movlw	33
  3279  000CB2  6ECD               	movwf	4045,c	;volatile
  3280                           
  3281                           ;ES_Port.c: 116: {GIE = 1;};
  3282  000CB4  8EF2               	bsf	intcon,7,c	;volatile
  3283  000CB6  0012               	return		;funcret
  3284  000CB8                     __end_of__HW_Timer_Init:
  3285                           	opt stack 0
  3286                           tosu	equ	0xFFF
  3287                           tosh	equ	0xFFE
  3288                           tosl	equ	0xFFD
  3289                           pclath	equ	0xFFA
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           indf1	equ	0xFE7
  3300                           postinc1	equ	0xFE6
  3301                           fsr1h	equ	0xFE2
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _ES_InitQueue *****************
  3311 ;; Defined at:
  3312 ;;		line 58 in file "ES_Queue.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  pBlock          2   16[COMRAM] PTR struct ES_Event_t
  3315 ;;		 -> Queue0(18), 
  3316 ;;  BlockSize       1   18[COMRAM] unsigned char 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  pThisQueue      2   19[COMRAM] PTR struct .
  3319 ;;		 -> Queue0(18), 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3329 ;;      Params:         3       0       0       0
  3330 ;;      Locals:         2       0       0       0
  3331 ;;      Temps:          0       0       0       0
  3332 ;;      Totals:         5       0       0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    1
  3336 ;; This function calls:
  3337 ;;		Nothing
  3338 ;; This function is called by:
  3339 ;;		_ES_Initialize
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text22
  3344  000BC6                     __ptext22:
  3345                           	opt stack 0
  3346  000BC6                     _ES_InitQueue:
  3347                           	opt stack 28
  3348                           
  3349                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3350                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3351                           
  3352                           ;incstack = 0
  3353  000BC6  C011  F014         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3354  000BCA  C012  F015         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3355                           
  3356                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3357  000BCE  0413               	decf	ES_InitQueue@BlockSize,w,c
  3358  000BD0  C014  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3359  000BD4  C015  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3360  000BD8  6EDF               	movwf	indf2,c
  3361                           
  3362                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3363  000BDA  EE20 F001          	lfsr	2,1
  3364  000BDE  5014               	movf	ES_InitQueue@pThisQueue,w,c
  3365  000BE0  26D9               	addwf	fsr2l,f,c
  3366  000BE2  5015               	movf	ES_InitQueue@pThisQueue+1,w,c
  3367  000BE4  22DA               	addwfc	fsr2h,f,c
  3368  000BE6  0E00               	movlw	0
  3369  000BE8  6EDF               	movwf	indf2,c
  3370                           
  3371                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3372  000BEA  EE20 F002          	lfsr	2,2
  3373  000BEE  5014               	movf	ES_InitQueue@pThisQueue,w,c
  3374  000BF0  26D9               	addwf	fsr2l,f,c
  3375  000BF2  5015               	movf	ES_InitQueue@pThisQueue+1,w,c
  3376  000BF4  22DA               	addwfc	fsr2h,f,c
  3377  000BF6  0E00               	movlw	0
  3378  000BF8  6EDF               	movwf	indf2,c
  3379  000BFA  0012               	return	
  3380  000BFC                     __end_of_ES_InitQueue:
  3381                           	opt stack 0
  3382                           tosu	equ	0xFFF
  3383                           tosh	equ	0xFFE
  3384                           tosl	equ	0xFFD
  3385                           pclath	equ	0xFFA
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           indf1	equ	0xFE7
  3396                           postinc1	equ	0xFE6
  3397                           fsr1h	equ	0xFE2
  3398                           fsr1l	equ	0xFE1
  3399                           indf2	equ	0xFDF
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _ISR *****************
  3407 ;; Defined at:
  3408 ;;		line 119 in file "ES_Port.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3422 ;;      Params:         0       0       0       0
  3423 ;;      Locals:         0       0       0       0
  3424 ;;      Temps:         16       0       0       0
  3425 ;;      Totals:        16       0       0       0
  3426 ;;Total ram usage:       16 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		Interrupt level 2
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	intcode
  3436  000008                     __pintcode:
  3437                           	opt stack 0
  3438  000008                     _ISR:
  3439                           	opt stack 23
  3440                           
  3441                           ;incstack = 0
  3442  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3443  00000A  CFFA F003          	movff	pclath,??_ISR+2
  3444  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  3445  000012  ED64  F004         	call	int_func,f	;refresh shadow registers
  3446                           tosu	equ	0xFFF
  3447                           tosh	equ	0xFFE
  3448                           tosl	equ	0xFFD
  3449                           pclatu	equ	0xFFB
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf1	equ	0xFE7
  3461                           postinc1	equ	0xFE6
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471                           	psect	intcode_body
  3472  0008C8                     __pintcode_body:
  3473                           	opt stack 23
  3474  0008C8                     int_func:
  3475                           	opt stack 23
  3476  0008C8  0006               	pop		; remove dummy address from shadow register refresh
  3477  0008CA  CFE9 F005          	movff	fsr0l,??_ISR+4
  3478  0008CE  CFEA F006          	movff	fsr0h,??_ISR+5
  3479  0008D2  CFE1 F007          	movff	fsr1l,??_ISR+6
  3480  0008D6  CFE2 F008          	movff	fsr1h,??_ISR+7
  3481  0008DA  CFD9 F009          	movff	fsr2l,??_ISR+8
  3482  0008DE  CFDA F00A          	movff	fsr2h,??_ISR+9
  3483  0008E2  CFF3 F00B          	movff	prodl,??_ISR+10
  3484  0008E6  CFF4 F00C          	movff	prodh,??_ISR+11
  3485  0008EA  CFF6 F00D          	movff	tblptrl,??_ISR+12
  3486  0008EE  CFF7 F00E          	movff	tblptrh,??_ISR+13
  3487  0008F2  CFF8 F00F          	movff	tblptru,??_ISR+14
  3488  0008F6  CFF5 F010          	movff	tablat,??_ISR+15
  3489                           
  3490                           ;ES_Port.c: 122: static unsigned int LastTime;
  3491                           ;ES_Port.c: 123: static unsigned int NextTime;
  3492                           ;ES_Port.c: 125: if (CCP1IF == 1)
  3493  0008FA  A49E               	btfss	3998,2,c	;volatile
  3494  0008FC  D014               	goto	i2l142
  3495                           
  3496                           ;ES_Port.c: 126: {
  3497                           ;ES_Port.c: 127: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3498  0008FE  50BF               	movf	4031,w,c	;volatile
  3499  000900  6E01               	movwf	??_ISR& (0+255),c
  3500  000902  50BE               	movf	4030,w,c	;volatile
  3501  000904  6E38               	movwf	ISR@LastTime,c
  3502  000906  C001  F039         	movff	??_ISR,ISR@LastTime+1
  3503                           
  3504                           ;ES_Port.c: 128: NextTime = LastTime + ((32000000L/4/4)/100);
  3505  00090A  0E20               	movlw	32
  3506  00090C  2438               	addwf	ISR@LastTime,w,c
  3507  00090E  6E3A               	movwf	ISR@NextTime,c
  3508  000910  0E4E               	movlw	78
  3509  000912  2039               	addwfc	ISR@LastTime+1,w,c
  3510  000914  6E3B               	movwf	ISR@NextTime+1,c
  3511                           
  3512                           ;ES_Port.c: 129: CCPR1H = (unsigned char)(NextTime >> 8);
  3513  000916  503B               	movf	ISR@NextTime+1,w,c
  3514  000918  6EBF               	movwf	4031,c	;volatile
  3515                           
  3516                           ;ES_Port.c: 130: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3517  00091A  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3518                           
  3519                           ;ES_Port.c: 131: CCP1IF = 0;
  3520  00091E  949E               	bcf	3998,2,c	;volatile
  3521                           
  3522                           ;ES_Port.c: 132: TickCount++;
  3523  000920  2A4B               	incf	_TickCount,f,c	;volatile
  3524                           
  3525                           ;ES_Port.c: 133: SysTickCounter++;
  3526  000922  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3527  000924  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3528  000926                     i2l142:
  3529  000926  C010  FFF5         	movff	??_ISR+15,tablat
  3530  00092A  C00F  FFF8         	movff	??_ISR+14,tblptru
  3531  00092E  C00E  FFF7         	movff	??_ISR+13,tblptrh
  3532  000932  C00D  FFF6         	movff	??_ISR+12,tblptrl
  3533  000936  C00C  FFF4         	movff	??_ISR+11,prodh
  3534  00093A  C00B  FFF3         	movff	??_ISR+10,prodl
  3535  00093E  C00A  FFDA         	movff	??_ISR+9,fsr2h
  3536  000942  C009  FFD9         	movff	??_ISR+8,fsr2l
  3537  000946  C008  FFE2         	movff	??_ISR+7,fsr1h
  3538  00094A  C007  FFE1         	movff	??_ISR+6,fsr1l
  3539  00094E  C006  FFEA         	movff	??_ISR+5,fsr0h
  3540  000952  C005  FFE9         	movff	??_ISR+4,fsr0l
  3541  000956  C004  FFFB         	movff	??_ISR+3,pclatu
  3542  00095A  C003  FFFA         	movff	??_ISR+2,pclath
  3543  00095E  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3544  000960  0011               	retfie		f
  3545  000962                     __end_of_ISR:
  3546                           	opt stack 0
  3547                           tosu	equ	0xFFF
  3548                           tosh	equ	0xFFE
  3549                           tosl	equ	0xFFD
  3550                           pclatu	equ	0xFFB
  3551                           pclath	equ	0xFFA
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           fsr0h	equ	0xFEA
  3561                           fsr0l	equ	0xFE9
  3562                           wreg	equ	0xFE8
  3563                           indf1	equ	0xFE7
  3564                           postinc1	equ	0xFE6
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           tosu	equ	0xFFF
  3574                           tosh	equ	0xFFE
  3575                           tosl	equ	0xFFD
  3576                           pclatu	equ	0xFFB
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           postinc0	equ	0xFEE
  3586                           fsr0h	equ	0xFEA
  3587                           fsr0l	equ	0xFE9
  3588                           wreg	equ	0xFE8
  3589                           indf1	equ	0xFE7
  3590                           postinc1	equ	0xFE6
  3591                           fsr1h	equ	0xFE2
  3592                           fsr1l	equ	0xFE1
  3593                           indf2	equ	0xFDF
  3594                           postinc2	equ	0xFDE
  3595                           postdec2	equ	0xFDD
  3596                           fsr2h	equ	0xFDA
  3597                           fsr2l	equ	0xFD9
  3598                           status	equ	0xFD8
  3599                           
  3600                           	psect	rparam
  3601  0000                     tosu	equ	0xFFF
  3602                           tosh	equ	0xFFE
  3603                           tosl	equ	0xFFD
  3604                           pclatu	equ	0xFFB
  3605                           pclath	equ	0xFFA
  3606                           tblptru	equ	0xFF8
  3607                           tblptrh	equ	0xFF7
  3608                           tblptrl	equ	0xFF6
  3609                           tablat	equ	0xFF5
  3610                           prodh	equ	0xFF4
  3611                           prodl	equ	0xFF3
  3612                           intcon	equ	0xFF2
  3613                           postinc0	equ	0xFEE
  3614                           fsr0h	equ	0xFEA
  3615                           fsr0l	equ	0xFE9
  3616                           wreg	equ	0xFE8
  3617                           indf1	equ	0xFE7
  3618                           postinc1	equ	0xFE6
  3619                           fsr1h	equ	0xFE2
  3620                           fsr1l	equ	0xFE1
  3621                           indf2	equ	0xFDF
  3622                           postinc2	equ	0xFDE
  3623                           postdec2	equ	0xFDD
  3624                           fsr2h	equ	0xFDA
  3625                           fsr2l	equ	0xFD9
  3626                           status	equ	0xFD8
  3627                           
  3628                           	psect	temp
  3629  00004F                     btemp:
  3630                           	opt stack 0
  3631  00004F                     	ds	1
  3632  0000                     int$flags	set	btemp
  3633                           tosu	equ	0xFFF
  3634                           tosh	equ	0xFFE
  3635                           tosl	equ	0xFFD
  3636                           pclatu	equ	0xFFB
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           postinc0	equ	0xFEE
  3646                           fsr0h	equ	0xFEA
  3647                           fsr0l	equ	0xFE9
  3648                           wreg	equ	0xFE8
  3649                           indf1	equ	0xFE7
  3650                           postinc1	equ	0xFE6
  3651                           fsr1h	equ	0xFE2
  3652                           fsr1l	equ	0xFE1
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      78
    BANK0           160      9      59
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostToggleService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostToggleService(), 

    S109$pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 18
		 -> Queue0(BANK0[18]), 

    S88$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), 

    S88$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _main->_ES_Initialize
    _ES_Timer_Tick_Resp->_PostToggleService
    _PostToggleService->_ES_PostToService
    _RunToggleService->_ES_Timer_InitTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitToggleService
    _InitToggleService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   13283
                                              8 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             16 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7950
                                             48 COMRAM     1     1      0
                                              4 BANK0      4     4      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                   _RunToggleService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    4049
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    4049
                                              0 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    3606
                                             45 COMRAM     3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             16 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3     530
                                             21 COMRAM     6     3      3
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2742
                                             28 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             16 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             16 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    4837
                                             49 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                       _ES_InitQueue
                      _ES_Timer_Init
                  _InitToggleService *
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    4     4      0    3906
                                             45 COMRAM     4     4      0
                   _ES_PostToService
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   5     3      2     366
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3475
                                             39 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2811
                                             28 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1582
                                             22 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             18 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             16 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _ES_Timer_InitTimer
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunToggleService *
       _ES_Timer_InitTimer
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      9      3B       4       36.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      4E       1       83.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89       9        0.0%
DATA                 0      0      89      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Nov 15 00:57:10 2016

                   ??__HW_Timer_Init 0013                  ES_CheckUserEvents@i 0011  
                __HW_Timer_Init@Rate 0011                  ___wmul@multiplicand 0019  
                        __CFG_BORV$3 000000                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                          __CFG_LVP$ON 000000  
                                l358 08C6                                  l383 0B70  
              __end_of_ES_Initialize 0764                                  _GIE 007F97  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                _ISR 0008                       _PacketReceived 004A  
                       ___awmod@sign 0016              __end_of_Check4Keystroke 0CF0  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 0025  
            ES_EnQueueFIFO@Event2Add 001F                    ?_ES_PostToService 0028  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2114 096A  
                               l2060 0A0E                                 l2052 09F4  
                               l2108 0B10                                 l2124 09CC  
                               l2310 06E6                                 l2222 0474  
                               l2072 0A3A                                 l2064 0A22  
                               l2056 0A02                                 l2048 09E8  
                               l2232 04B0                                 l2128 09D0  
                               l2144 04C4                                 l2058 0A0A  
                               l2306 06E2                                 l2322 0760  
                               l2226 048C                                 l2154 0532  
                               l2250 0CCE                                 l2068 0A2C  
                               l2092 0814                                 l2156 056A  
                               l2332 0622                                 l2500 0892  
                               l2318 075C                                 l2254 0CD4  
                               l2342 0686                                 l2326 05AE  
                               l2350 0C06                                 l2502 08A0  
                               l2352 0C0C                                 l2274 0BC2  
                               l2186 0C48                                 l2178 0C30  
                               l2290 0B80                                 l2338 0674  
                               l2506 08AE                                 l2288 0B72  
                               l2298 069C                                 l2496 0876  
                               l2498 0884                                 STR_1 035B  
                               STR_2 0376                                 STR_3 038E  
                               STR_4 03A5                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u1418 051A                                 u1364 0988  
                               u1365 0982                                 u1618 0738  
                               u1619 0752                                 _PIE1 000F9D  
                               u1488 0B32                                 u1489 0B4A  
                               u1658 064A                                 u1659 0662  
                 ??_ES_PostToService 002B                                 _main 0818  
                        ?_ES_DeQueue 001D                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 004F  
                      main@ErrorType 009A                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_IESO$OFF 000000  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000010  
                              ??_ISR 0001                   ES_Run@HighestPrior 0031  
                              ?_main 0001                __end_of_ES_Timer_Init 0CEC  
                    __end_of___awmod 0A44                      __end_of___lbmod 0C50  
           __end_of_RunToggleService 0B8E                                _T1CON 000FCD  
                         _DistList00 0359                                _LATA0 007C48  
                              _LATA1 007C49                                _LATA2 007C4A  
                              _LATC2 007C5A                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l142 0926                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                        __CFG_PWRT$OFF 000000  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                              _Ready 003C                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                              _putch 0CF0                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0C50               ES_GetMSBitSet@LoopCntr 001A  
         __end_of_ES_CheckUserEvents 0B54                         __end_of_main 08C8  
                  ES_Timer_Init@Rate 0013                  __end_of_EventQueues 0357  
                             ??_main 0033                        __activetblptr 000002  
                __size_of_ES_DeQueue 00FE                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 0CDE                     ?_Check4Keystroke 0001  
                             _CCP1IF 007CF2                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 0049  
                    __CFG_BBSIZ$1024 000000                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0013                               _INTCON 000FF2  
                             _ES_Run 05AC                     ??_ES_EnQueueFIFO 0022  
                     _Timer2PostFunc 0321                       __CFG_XINST$OFF 000000  
                             _Queue0 0080                       _SysTickCounter 003E  
                             ___wmul 0C76                       __CFG_STVREN$ON 000000  
                          ??___awmod 0015                            ??___lbmod 0012  
        __size_of_ES_Timer_InitTimer 006A                               clear_0 0C56  
                             clear_1 0C62                      ___awmod@divisor 0013  
          ES_Timer_InitTimer@NewTime 0011                      ___awmod@counter 0015  
                             _printf 0BFC                          ISR@LastTime 0038  
                    __CFG_BOREN$BOHW 000000               ES_InitQueue@pThisQueue 0014  
                       __mediumconst 0000                          ISR@NextTime 003A  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
        __size_of_ES_Timer_Tick_Resp 00F8                 ES_DeQueue@pThisQueue 0025  
            ES_GetMSBitSet@Val2Check 0011                      ___lbmod@divisor 0011  
                         __accesstop 0060              __end_of__initialization 0C68  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0013  
                    __CFG_PBADEN$OFF 000000                        ___rparam_used 000001  
                        _EventQueues 0354                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 0011              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 0CF2                      _TMR_ActiveFlags 0040  
            ES_GetMSBitSet@ReturnVal 0018                       _TMR_TimerArray 0060  
           ES_EnQueueFIFO@pThisQueue 0026                              ??_putch 0011  
           __HW_Process_Pending_Ints 0CCC                           __pbssBANK0 0060  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0021  
          __size_of_ES_PostToService 0066                       ??_ES_InitQueue 0014  
                            ?___wmul 0017                              _CCP1CON 000FBD  
                            ?_printf 0011                    ?_RunToggleService 0016  
                 __end_of_ES_DeQueue 04B4                   ??_RunToggleService 0019  
                    __size_of_ES_Run 00E0              ToggleService@MyPriority 0046  
             __size_of_ES_Initialize 00D8                              __Hparam 0000  
                            __Lparam 0000                              ___awmod 09D4  
                            ___lbmod 0C26                      __size_of___wmul 0026  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 0015  
                            __pcinit 0C50                              __ramtop 0300  
                            __ptext0 0818                              __ptext1 0BFC  
                            __ptext2 0CF0                              __ptext3 05AC  
                            __ptext4 0CCC                              __ptext5 04B4  
                            __ptext6 0CB8                              __ptext7 0962  
                            __ptext8 0B54                              __ptext9 03B6  
                    __size_of_printf 002A                    _PostToggleService 0CB8  
                       __size_of_ISR 095A              __size_of__HW_Timer_Init 001C  
                   ___awmod@dividend 0011                   _ES_CheckUserEvents 0B14  
                 ?_PostToggleService 002E                      ES_Run@ThisEvent 004C  
          InitToggleService@Priority 0031                     _AccelerometerIOC 0047  
                     __pintcode_body 08C8                 end_of_initialization 0C68  
                ?_ES_CheckUserEvents 0001                  ??_PostToggleService 0031  
                      __Lmediumconst 0000                              int_func 08C8  
       ES_PostToService@WhichService 002D               __size_of_ES_Timer_Init 000E  
                            printf@c 0015                              printf@f 0011  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ??_ES_CheckUserEvents 0011            __end_of_PostToggleService 0CCC  
                          _PORTCbits 000F82                        _ES_Initialize 068C  
                   ___lbmod@dividend 0012                 __end_of_ES_EventList 0359  
               __end_of_ES_InitQueue 0BFC                       ES_Initialize@i 0032  
                        ___lbmod@rem 0014             __size_of_Check4Keystroke 0004  
         PostToggleService@ThisEvent 002E            RunToggleService@ThisEvent 0016  
                     __end_of_ES_Run 068C                   __end_of_DistList00 035B  
                   _ES_PostToService 0AAE           __end_of_ES_Timer_InitTimer 0AAE  
               __end_of_ServDescList 0354                       __end_of___wmul 0C9C  
                     ?_ES_Initialize 0092           ??__HW_Process_Pending_Ints 0031  
                      _ES_Timer_Init 0CDE                       __end_of_printf 0C26  
         __end_of_ES_Timer_Tick_Resp 05AC                  start_initialization 0C50  
                        __end_of_ISR 0962                         _CurrentState 0048  
                           ??_ES_Run 0096                     __CFG_OSC$IRCIO67 000000  
                  _InitToggleService 0B8E                            _TickCount 004B  
                 ?_InitToggleService 0001              __size_of_ES_GetMSBitSet 0072  
          TemplateService@MyPriority 0045                             ??___wmul 001B  
                   __CFG_LPT1OSC$OFF 000000                  ??_InitToggleService 002E  
         __size_of_PostToggleService 0014              __size_of_ES_EnQueueFIFO 00B4  
                           ??_printf 0013                       ?_ES_Timer_Init 0013  
                     __HW_Timer_Init 0C9C                          __pbssCOMRAM 0033  
                      __pcstackBANK0 0092                   ES_InitQueue@pBlock 0011  
          __end_of_InitToggleService 0BC6            __size_of_RunToggleService 003A  
                      __PRIMASK_temp 0042                    ??_Check4Keystroke 0011  
                          __pintcode 0008                             ?___awmod 0011  
                           ?___lbmod 0011                      ??_ES_Initialize 0032  
           ES_PostToService@TheEvent 0028               __end_of__HW_Timer_Init 0CB8  
                        __smallconst 0300                __size_of_ES_InitQueue 0036  
        RunToggleService@ReturnEvent 0019                       __size_of_putch 0002  
               ES_Initialize@NewRate 0092            ES_GetMSBitSet@Nybble2Test 0019  
                     ___wmul@product 001B                     __CFG_WDTPS$32768 000000  
                       _ES_EventList 0357                         _ES_InitQueue 0BC6  
                    ??_ES_Timer_Init 0015                      ?__HW_Timer_Init 0011  
                         _ADCON1bits 000FC1                    ___wmul@multiplier 0017  
                 ES_DeQueue@SaveCrit 0023                 ES_EnQueueFIFO@pBlock 001D  
           __end_of_ES_PostToService 0B14                       _BitNum2SetMask 0301  
                       _ServDescList 0350           __size_of_InitToggleService 0038  
                           __Hrparam 0000                       _ES_GetMSBitSet 0962  
                           __Lrparam 0000                     __size_of___awmod 0070  
                   __size_of___lbmod 002A          __size_of_ES_CheckUserEvents 0040  
                     _ES_EnQueueFIFO 0764                   _ES_Timer_InitTimer 0A44  
             __end_of_BitNum2SetMask 0321                             __ptext10 0C26  
                           __ptext11 0B14                             __ptext20 0CDE  
                           __ptext12 0CEC                             __ptext21 0C9C  
                           __ptext13 068C                             __ptext22 0BC6  
                           __ptext14 0B8E                             __ptext15 0A44  
                           __ptext16 0AAE                             __ptext17 0764  
                           __ptext18 0C76                             __ptext19 09D4  
  ES_Timer_Tick_Resp@NeedsProcessing 0036                  ?_ES_Timer_InitTimer 0011  
                      __size_of_main 00B0                     _RunToggleService 0B54  
                 _ES_Timer_Tick_Resp 04B4               __end_of_ES_GetMSBitSet 09D4  
         InitToggleService@ThisEvent 002E                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_ES_EnQueueFIFO 0818                             int$flags 004F  
               ??_ES_Timer_InitTimer 0013                    ES_DeQueue@NumLeft 0024  
               ??_ES_Timer_Tick_Resp 0092                      _Check4Keystroke 0CEC  
                           intlevel2 0000                           _ES_DeQueue 03B6  
  __size_of__HW_Process_Pending_Ints 0012            ?__HW_Process_Pending_Ints 0001  
                    ?_ES_GetMSBitSet 0011  ES_Timer_Tick_Resp@NextTimer2Process 0044  
                           printf@ap 0013                      ?_ES_EnQueueFIFO 001D  
                   ES_DeQueue@pBlock 001D               ES_DeQueue@pReturnEvent 001F  
              ES_InitQueue@BlockSize 0013  
